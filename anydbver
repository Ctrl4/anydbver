#!/bin/bash
[ -f .anydbver ] && source .anydbver

if [ "x$1" = "xhelp" ] ; then
  echo "Use: "
  echo "$0 ssh default or $0 ssh node1"
  echo "$0 deploy percona-server:8.0.16 or $0 deploy percona-server:8.0 or $0 deploy percona-server"
  exit 0
fi

if [ "x$1" = "xconfigure" ] ; then
  while (( "$#" )); do
    if [[ "$1" == provider:* ]] ; then
      PROVIDER=$(echo "$1"|cut -d: -f 2)
      case "$PROVIDER" in
        vagrant)
          ;;
        lxdock)
          ;;
        podman)
          ;;
        lxd)
          ;;
        *)
          echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
          exit 1
      esac
    fi
    shift
  done

  :> .anydbver
  echo "PROVIDER=$PROVIDER" >> .anydbver
  echo "LXD_PROFILE=$LXD_PROFILE" >> .anydbver

  exit 0
fi


if [ "x$1" = "xssh" ] ; then
  shift
  NODE="$1"
  if [ "x$NODE" = "x" ] ; then
    NODE=default
  else
    shift
  fi
  case "$PROVIDER" in
    vagrant)
      exec vagrant ssh "$NODE" "$@"
      ;;
    lxdock)
      ;;
    podman)
      exec ./podmanctl ssh "$NODE" "$@"
      ;;
    lxd)
      exec ./lxdctl ssh "$NODE" "$@"
      ;;
    *)
      echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
      exit 1
  esac
fi
if [ "x$1" = "xdestroy" ] ; then
  shift
  NODE="$1"
  if [ "x$NODE" = "x" ] ; then
    NODE=default
  else
    shift
  fi
  case "$PROVIDER" in
    vagrant)
      exec vagrant destroy -f
      ;;
    lxdock)
      exec lxdock destroy -f
      ;;
    podman)
      exec ./podmanctl --destroy
      ;;
    lxd)
      exec ./lxdctl --destroy
      ;;
    *)
      echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
      exit 1
  esac
fi


get_version() {
  if [[ $i == *':'* ]] ; then
    echo "$1" | cut -d: -f2
  else
    echo "$1" | cut -d= -f2
  fi
}

refresh_percona_server_version_info() {
  [ -d .version-info] || mkdir .version-info
  curl -sL https://repo.percona.com/percona/yum/release/7/RPMS/x86_64/|perl -ne '/Percona-Server-server-\d\d-([^"]*).el7.x86_64.rpm/ and print "$1\n"' > .version-info/percona-server.el7.txt

  curl -sL https://www.percona.com/downloads/Percona-Server-LATEST/ > .version-info/percona-server-80.html
  for VER in $( cat .version-info/percona-server-80.html |perl -ne 'm,option value=\"Percona-Server-LATEST/Percona-Server-([^/]*?)\", and print "$1\n"'|sort -n ) ; do
    curl -sL https://www.percona.com/downloads/Percona-Server-LATEST/Percona-Server-"$VER"/binary/redhat/7/ |grep "$VER"|perl -ne '/percona-server-server-(.*?).el7.x86_64.rpm/ and print "$1\n"'
  done >> .version-info/percona-server.el7.txt
  rm -f .version-info/percona-server-80.html
}

deploy_node() {
  [ -f .version-info/percona-server.el7.txt ] || refresh_percona_server_version_info
  NODE="$1"
  DEP_ENV=""
  shift
  arr=("$@")
  for i in "${arr[@]}";
  do
    if [[ $i == "percona-server" ]] || [[ $i == "percona-server:"* ]] || [[ $i == "ps" ]] || [[ $i == "ps:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/percona-server.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PS=$VER"
      else
        VER=$(tail -n 1 .version-info/percona-server.el7.txt)
        DEP_ENV="$DEP_ENV PS=$VER"
      fi
    fi
  done

  [[ "$DEP_ENV" == *DB_USER* ]] || DEP_ENV="$DEP_ENV DB_USER=root"
  [[ "$DEP_ENV" == *DB_PASS* ]] || DEP_ENV="$DEP_ENV DB_PASS=secret"
  [[ "$DEP_ENV" == *START* ]] || DEP_ENV="$DEP_ENV START=1"
  if  [[ "$DEP_ENV" == *DB_OPTS* ]] ; then
    :
  elif [[ "$DEP_ENV" == *'PS='* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/async-repl-gtid.cnf"
  fi

  case "$PROVIDER" in
    vagrant)
      echo "$DEP_ENV vagrant provision $NODE"
      ;;
    lxdock)
      echo "$DEP_ENV lxdock provision $NODE"
      ;;
    podman)
      echo "$DEP_ENV ansible-playbook -i ansible_hosts --limit $USER.$NODE playbook.yml"
      ;;
    lxd)
      echo "$DEP_ENV ansible-playbook -i ansible_hosts --limit $USER.$NODE playbook.yml"
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac
}

if [ "x$1" = "xdeploy" ] ; then
  DEPLARGS=()
  DEPLOY_CMDS=()
  NODE=default
  shift
  if [[ "$1" == default ]] ; then
    shift
  fi

  while (( "$#" )); do
    while (( "$#" )); do
      if [[ "$1" == node* ]] ; then
        break
      fi
      DEPLARGS+="$1"
      shift
    done
    DEPCMD=$(deploy_node $NODE "${DEPLARGS[@]}")
    DEPLOY_CMDS+=("$DEPCMD")
    if [[ "$1" == node* ]] ; then
      NODE="$1"
      shift
    fi

    DEPLARGS=()
  done

  case "$PROVIDER" in
    vagrant)
      ;;
    lxdock)
      ;;
    podman)
      ./podmanctl --destroy
      ./podmanctl --nodes ${#DEPLOY_CMDS[@]}
      ;;
    lxd)
      ./lxdctl --destroy
      ./lxdctl --nodes ${#DEPLOY_CMDS[@]}
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac

  for i in "${DEPLOY_CMDS[@]}"; do
    bash -c "$i"
  done

fi

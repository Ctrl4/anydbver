#!/bin/bash
[ -f .anydbver ] && source .anydbver

if [ "x$1" = "xhelp" ] ; then
  echo "Use: "
  echo "$0 configure provider:lxd"
  echo "$0 ssh default or $0 ssh node1"
  echo "$0 update # refresh version information"
  echo "$0 deploy help"
  exit 0
fi

if [ "x$2" = "xhelp" ] ; then
  if [ "x$1" = "xdeploy" ] ; then
    echo "Deploy: "
    echo "$0 deploy percona-server:8.0.16"
    echo "$0 deploy percona-server:8.0"
    echo "$0 deploy percona-server"
    echo "$0 deploy ps:5.7"
    echo "$0 deploy mariadb:10.4"
    echo "$0 deploy maria:10.4"
    echo "$0 deploy mariadb node1 mariadb master:default"
    echo "$0 deploy mariadb node1 mariadb master:default default mariadb master:node1 node2 mariadb master:node1"
    echo "$0 deploy ps:5.7 node1 ps:5.7 master:default node2 ps:5.7 master:node1"
    echo "$0 deploy ps:8.0 utf8 node1 ps:5.7 master:default node2 ps:5.6 master:node1 row"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default default k8s-mongo"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default default k8s-pxc"
    echo "$0 deploy pg:12.3"
    exit 0
  fi
fi


if [ "x$1" = "xconfigure" ] ; then
  while (( "$#" )); do
    if [[ "$1" == provider:* ]] ; then
      PROVIDER=$(echo "$1"|cut -d: -f 2)
      case "$PROVIDER" in
        vagrant)
          ;;
        lxdock)
          ;;
        podman)
          ;;
        lxd)
          ;;
        *)
          echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
          exit 1
      esac
    fi
    shift
  done

  :> .anydbver
  echo "PROVIDER=$PROVIDER" >> .anydbver
  echo "LXD_PROFILE=$LXD_PROFILE" >> .anydbver

  exit 0
fi


if [ "x$1" = "xssh" ] ; then
  shift
  NODE="$1"
  if [ "x$NODE" = "x" ] ; then
    NODE=default
  else
    shift
  fi
  case "$PROVIDER" in
    vagrant)
      exec vagrant ssh "$NODE" "$@"
      ;;
    lxdock)
      ;;
    podman)
      exec ./podmanctl ssh "$NODE" "$@"
      ;;
    lxd)
      exec ./lxdctl ssh "$NODE" "$@"
      ;;
    *)
      echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
      exit 1
  esac
fi
if [ "x$1" = "xdestroy" ] ; then
  shift
  NODE="$1"
  if [ "x$NODE" = "x" ] ; then
    NODE=default
  else
    shift
  fi
  case "$PROVIDER" in
    vagrant)
      exec vagrant destroy -f
      ;;
    lxdock)
      exec lxdock destroy -f
      ;;
    podman)
      exec ./podmanctl --destroy
      ;;
    lxd)
      exec ./lxdctl --destroy
      ;;
    *)
      echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
      exit 1
  esac
fi


get_version() {
  if [[ $i == *':'* ]] ; then
    echo "$1" | cut -d: -f2
  else
    echo "$1" | cut -d= -f2
  fi
}

refresh_percona_server_version_info() {
  [ -d .version-info ] || mkdir .version-info
  curl -sL https://repo.percona.com/percona/yum/release/7/RPMS/x86_64/|perl -ne '/Percona-Server-server-\d\d-([^"]*).el7.x86_64.rpm/ and print "$1\n"' > .version-info/percona-server.el7.txt

  curl -sL https://www.percona.com/downloads/Percona-Server-LATEST/ > .version-info/percona-server-80.html
  for VER in $( cat .version-info/percona-server-80.html |perl -ne 'm,option value=\"Percona-Server-LATEST/Percona-Server-([^/]*?)\", and print "$1\n"'|sort -n ) ; do
    curl -sL https://www.percona.com/downloads/Percona-Server-LATEST/Percona-Server-"$VER"/binary/redhat/7/ |grep "$VER"|perl -ne '/percona-server-server-(.*?).el7.x86_64.rpm/ and print "$1\n"'
  done >> .version-info/percona-server.el7.txt
  rm -f .version-info/percona-server-80.html

  :> .version-info/mariadb.el7.txt
  cat > .version-info/mariadb.el7.txt <<EOF
10.1.29
EOF

  for maver in 10.3 10.4 10.5 ; do
    curl -sL http://yum.mariadb.org/$maver/centos7-amd64/rpms/| perl -ne '/MariaDB-server-(\d[^"]*).el7.centos.x86_64.rpm/ and print "$1\n"' >> .version-info/mariadb.el7.txt
  done

  cat > .version-info/pmm-server.txt <<EOF
1.17.1
1.17.2
1.17.3
1.17.4
2.0.0
2.0.1
2.1.0
2.2.0
2.2.1
2.2.2
2.3.0
2.4.0
2.5.0
2.6.0
2.6.1
2.8.0
2.9.1
2.10.0
latest
EOF
  cat > .version-info/pg.el7.txt <<EOF
9.5.15
9.5.23
10.7
10.8
10.9
10.10
10.11
10.12
10.13
10.14
11.0
11.2
11.3
11.4
11.5
11.6
11.7
11.8
11.9
12.1
12.2
12.3
12.4
13.0
EOF
  cat > .version-info/pg.el8.txt <<EOF
11.0
11.2
11.3
11.4
11.5
11.6
11.7
11.8
11.9
12.1
12.2
12.3
12.4
13.0
EOF
  cat > .version-info/pko4psmdb.txt <<EOF
0.1.0
0.2.0
0.2.1
0.3.0
1.0.0
1.1.0
1.2.0
1.3.0
1.4.0
1.5.0
EOF
  cat > .version-info/pko4pxc.txt <<EOF
0.1.0
0.2.0
0.3.0
1.0.0
1.1.0
1.2.0
1.3.0
1.4.0
1.5.0
EOF
}


if [ "x$1" = "xupdate" ] ; then
  refresh_percona_server_version_info
  exit 0
fi

deploy_node() {
  [ -f .version-info/percona-server.el7.txt ] || refresh_percona_server_version_info
  NODE="$1"
  DEP_ENV=""
  shift
  arr=("$@")
  ROW_REPLICATION=0
  UTF8ENC=0
  for i in "${arr[@]}";
  do
    if [[ $i == "percona-server" ]] || [[ $i == "percona-server:"* ]] || [[ $i == "ps" ]] || [[ $i == "ps:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/percona-server.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PS=$VER"
      else
        VER=$(tail -n 1 .version-info/percona-server.el7.txt)
        DEP_ENV="$DEP_ENV PS=$VER"
      fi
    fi
    if [[ $i == "mariadb" ]] || [[ $i == "mariadb:"* ]] || [[ $i == "maria" ]] || [[ $i == "maria:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/mariadb.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV MARIADB=$VER"
      else
        VER=$(tail -n 1 .version-info/mariadb.el7.txt)
        DEP_ENV="$DEP_ENV MARIADB=$VER"
      fi
    fi
    if [[ $i == "postgresql" ]] || [[ $i == "postgresql:"* ]] || [[ $i == "pg" ]] || [[ $i == "pg:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pg.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PG=$VER"
      else
        VER=$(tail -n 1 .version-info/pg.el7.txt)
        DEP_ENV="$DEP_ENV PG=$VER"
      fi
    fi
    if [[ $i == "k8s-mongo" ]] || [[ $i == "k8s-mongo:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pko4psmdb.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PKO4PSMDB=$VER"
      else
        VER=$(tail -n 1 .version-info/pko4psmdb.txt)
        DEP_ENV="$DEP_ENV PKO4PSMDB=$VER"
      fi
    fi
    if [[ $i == "k8s-pxc" ]] || [[ $i == "k8s-pxc:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pko4pxc.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PKO4PXC=$VER"
      else
        VER=$(tail -n 1 .version-info/pko4pxc.txt)
        DEP_ENV="$DEP_ENV PKO4PXC=$VER"
      fi
    fi
    if [[ $i == "master_ip" ]] || [[ $i == "master_ip:"* ]] || [[ $i == "master" ]] || [[ $i == "master:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        MASTER_NODE=$(get_version "$i")
        DEP_ENV="$DEP_ENV DB_IP=$MASTER_NODE "
      else
        DEP_ENV="$DEP_ENV DB_IP=default "
      fi
    fi
    if [[ $i == "rbr" ]] || [[ $i == "row" ]] || [[ $i == "row-based-replication" ]] || [[ $i == "row_based_replication" ]] ; then
      ROW_REPLICATION=1
    fi
    if [[ $i == "utf8" ]] || [[ $i == "utf8mb3" ]] ; then
      UTF8ENC=1
    fi
    if [[ $i == "pmm" ]] || [[ $i == "pmm:"* ]] || [[ $i == "pmm-server" ]] || [[ $i == "pmm-server:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pmm-server.txt |tail -n 1)
      else
        VER=$(tail -n 1 .version-info/pmm-server.txt)
      fi
      DEP_ENV="$DEP_ENV PMM_SERVER=$VER DB_PASS=secret"
    fi
    if [[ $i == "k3s-master" ]] || [[ $i == "k3s-master"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        MASTER_NODE=$(get_version "$i")
      else
        MASTER_NODE=default
      fi
      DEP_ENV="$DEP_ENV K3S_URL=$MASTER_NODE "
    fi
    if [[ $i == "k3s" ]] || [[ $i == "k3s:"* ]] || [[ $i == "k8s" ]] || [[ $i == "kubernetes" ]] ; then
      DEP_ENV="$DEP_ENV K3S=latest"
    fi
  done

  if [[ "$DEP_ENV" != *DB_USER* && "$DEP_ENV" == *'PG='* ]] ; then
    DEP_ENV="$DEP_ENV DB_USER=postgres"
  elif [[ "$DEP_ENV" != *DB_USER* ]] ; then
    DEP_ENV="$DEP_ENV DB_USER=root"
  fi
  [[ "$DEP_ENV" == *DB_PASS* ]] || DEP_ENV="$DEP_ENV DB_PASS=secret"
  [[ "$DEP_ENV" == *START* ]] || DEP_ENV="$DEP_ENV START=1"
  if  [[ "$DEP_ENV" == *DB_OPTS* ]] ; then
    :
  elif [[ "$DEP_ENV" == *'PS='* && $ROW_REPLICATION == 1 ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/async-repl-gtid-row.cnf"
  elif [[ "$DEP_ENV" == *'PS='* && $UTF8ENC == 1 ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/async-repl-gtid-utf8.cnf"
  elif [[ "$DEP_ENV" == *'PS='* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/async-repl-gtid.cnf"
  elif [[ "$DEP_ENV" == *'MARIADB='* && $ROW_REPLICATION == 1 ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mariadb/async-repl-gtid-row.cnf"
  elif [[ "$DEP_ENV" == *'MARIADB='* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mariadb/async-repl-gtid.cnf"
  elif [[ "$DEP_ENV" == *'PG='* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=postgresql/logical.conf"
  fi

  case "$PROVIDER" in
    vagrant)
      echo "$DEP_ENV vagrant provision $NODE"
      ;;
    lxdock)
      echo "$DEP_ENV lxdock provision $NODE"
      ;;
    podman)
      echo "$DEP_ENV ansible-playbook -i ansible_hosts --limit $USER.$NODE playbook.yml"
      ;;
    lxd)
      echo "$DEP_ENV ansible-playbook -i ansible_hosts --limit $USER.$NODE playbook.yml"
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac
}

find_node_ip() {
  NODE="$1"
  case "$PROVIDER" in
    vagrant)
      vagrant ssh $NODE -c /vagrant/tools/node_ip.sh 2>/dev/null
      ;;
    lxdock)
      lxdock shell $NODE -c /vagrant/tools/node_ip.sh 2>/dev/null
      ;;
    podman)
      sed -ne '/'$NODE'/ {s/^.*ansible_host=//;s/ .*$//;p}' ansible_hosts
      ;;
    lxd)
      sed -ne '/'$NODE'/ {s/^.*ansible_host=//;s/ .*$//;p}' ansible_hosts
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac
}

find_node_token() {
  NODE="$1"
  case "$PROVIDER" in
    lxdock)
      lxdock shell $NODE -c cat /var/lib/rancher/k3s/server/node-token
      ;;
    lxd)
      MASTER_IP=$(find_node_ip $NODE)
      ssh -i secret/id_rsa root@$MASTER_IP -o StrictHostKeyChecking=no cat /var/lib/rancher/k3s/server/node-token
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac
}

if [ "x$1" = "xdeploy" ] ; then
  PRIV_CONTAINER_REQUIRED=0
  DEPLARGS=()
  DEPLOY_CMDS=()
  NODE=default
  declare -A ALL_NODES
  shift
  if [[ "$1" == default ]] ; then
    shift
  fi

  while (( "$#" )); do
    while (( "$#" )); do
      if [[ "$1" == node* ]] || [[ "$1" == default && NODE != default ]] ; then
        break
      fi
      DEPLARGS+=("$1")
      shift
    done
    DEPCMD=$(deploy_node $NODE "${DEPLARGS[@]}")
    echo "$DEPCMD"|egrep -q 'PMM_SERVER|K8S|K3S|PKO' && PRIV_CONTAINER_REQUIRED=1
    DEPLOY_CMDS+=("$DEPCMD")
    ALL_NODES[$NODE]=1
    if [[ "$1" == node* || "$1" == default ]] ; then
      NODE="$1"
      shift
    fi

    DEPLARGS=()
  done

  case "$PROVIDER" in
    vagrant)
      ;;
    lxdock)
      ;;
    podman)
      ./podmanctl --destroy
      ./podmanctl --nodes ${#ALL_NODES[@]}
      ;;
    lxd)
      ./lxdctl --destroy
      if [[ $PRIV_CONTAINER_REQUIRED == 1 ]] ; then
        ./lxdctl --nodes ${#ALL_NODES[@]} --privileged
      else
        ./lxdctl --nodes ${#ALL_NODES[@]}
      fi
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac

  for i in "${DEPLOY_CMDS[@]}"; do
    if echo "$i" | grep -q DB_IP ; then
      MASTER_NODE=$(echo "$i" | perl -ne '/DB_IP=(\S*) / and print $1')
      MASTER_IP=$(find_node_ip $MASTER_NODE)
      i=$(echo "$i"|sed -e "s/DB_IP=$MASTER_NODE/DB_IP=$MASTER_IP/g")
    fi
    if echo "$i" | grep -q K3S_URL ; then
      MASTER_NODE=$(echo "$i" | perl -ne '/K3S_URL=(\S*) / and print $1')
      MASTER_IP=$(find_node_ip $MASTER_NODE)
      MASTER_TOKEN=$(find_node_token $MASTER_NODE)
      i=$(echo "$i"|sed -e "s,K3S_URL=$MASTER_NODE,K3S_URL=https://$MASTER_IP:6443 K3S_TOKEN=$MASTER_TOKEN,g")
    fi

    printf "%s\n" "$i"
    bash -c "$i"
  done

fi

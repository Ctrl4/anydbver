#!/bin/bash
[ -f .anydbver ] && source .anydbver

if [ "x$1" = "xhelp" ] ; then
  echo "Use: "
  echo "$0 configure provider:lxd"
  echo "$0 ssh default or $0 ssh node1"
  echo "$0 update # refresh version information"
  echo "$0 destroy # remove containers and cleanup"
  echo "$0 list # show currently running containers"
  echo "$0 deploy help"
  exit 0
fi

if [ "x$2" = "xhelp" ] ; then
  if [ "x$1" = "xdeploy" ] ; then
    echo "Deploy: "
    echo "$0 deploy percona-server:8.0.16"
    echo "$0 deploy percona-server:8.0"
    echo "$0 deploy percona-server"
    echo "$0 deploy ps:5.7"
    echo "$0 deploy ps:5.7 mydumper"
    echo "$0 deploy hn:vault.percona.local vault node1 ps:8.0 vault-server:vault.percona.local"
    echo "$0 deploy mysql"
    echo -e $0' deploy \\\n  hn:mysql_rs0_gr0 mysql:8.0.18 group-replication \\\n  node1 hn:mysql_rs0_gr1 mysql:8.0.18 group-replication master:default \\\n  node2 hn:mysql_rs0_gr2 mysql:8.0.18 group-replication master:default \\\n  node3 hn:mysql_rs0_router mysql-router:8.0.18 master:default'
    echo "$0 deploy mariadb:10.4"
    echo "$0 deploy maria:10.4"
    echo "$0 deploy mariadb node1 mariadb master:default"
    echo "$0 deploy mariadb node1 mariadb master:default default mariadb master:node1 node2 mariadb master:node1"
    echo "$0 deploy mariadb-cluster:10.4 node1 mariadb-cluster:10.4 galera-master:default node2 mariadb-cluster:10.4 galera-master:default"
    echo "$0 deploy ldap node1 ldap-master:default ps:5.7"
    echo "$0 deploy ps:5.7 node1 ps:5.7 master:default node2 ps:5.7 master:node1"
    echo "$0 deploy ps:5.7 hostname:leader.percona.local node1 ps:5.7 hostname:follower.percona.local leader:default"
    echo "$0 deploy ps:8.0 utf8 node1 ps:5.7 master:default node2 ps:5.6 master:node1 row"
    echo "$0 deploy ps:5.7 node1 ps:5.7 master:default node2 ps:5.7 master:node1 node3 orchestrator master:default"
    echo "$0 deploy samba node1 ps samba-dc:default"
    echo "$0 deploy pxc:5.7 node1 pxc:5.7 galera-master:default node2 pxc:5.7 galera-master:default"
    echo -e $0' deploy \\\n pxc:5.7 node1 pxc:5.7 galera-master:default node2 pxc:5.7 galera-master:default \\\n node3 pxc:5.7 cluster:cluster2 node4 pxc:5.7 cluster:cluster2 galera-master:node3 node5 pxc:5.7 cluster:cluster2 galera-master:node3'
    echo "$0 deploy pxc:5.7 node1 pxc:5.7 galera-master:default node2 pxc:5.7 garbd galera-master:default"
    echo "$0 deploy ps:8.0 group-replication node1 ps:8.0 group-replication master:default node2 ps:8.0 group-replication master:default"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default default k8s-mongo"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default default k8s-minio k8s-mongo"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default default k8s-pxc"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default default k8s-minio k8s-pmm k8s-pxc backup"
    echo "$0 deploy k3s node1 k3s-master:default node2 k3s-master:default node3 k3s-master:default default k8s-pg"
    echo "$0 deploy pg:12.3"
    echo "$0 deploy pg:12.3 node1 pg:12.3 master:default"
    echo "$0 deploy pg:13 patroni node1 pg:13 master:default patroni etcd-ip:default node2 pg:13 master:default patroni etcd-ip:default"
    echo "$0 deploy pmm node1 ppg pmm-client pmm-server:default"
    echo "$0 deploy psmdb"
    echo "$0 deploy psmdb replica-set:rs0 node1 psmdb master:default replica-set:rs0 node2 psmdb master:default replica-set:rs0"
    echo -e $0' deploy \\\n psmdb:4.2 replica-set:rs0 shardsrv \\\n node1 psmdb:4.2 master:default replica-set:rs0 shardsrv \\\n node2 psmdb:4.2 master:default replica-set:rs0 shardsrv \\\n node3 psmdb:4.2 configsrv replica-set:cfg0 \\\n node4 psmdb:4.2 configsrv replica-set:cfg0 master:node3 \\\n node5 psmdb:4.2 configsrv replica-set:cfg0 master:node3 \\\n node6 psmdb:4.2 mongos-cfg:cfg0/node3,node4,node5 mongos-shard:rs0/default,node1,node2'
    echo "$0 deploy sysbench"
    echo "$0 deploy ps:5.7 node1 ps:5.7 master:default node2 ps:5.7 master:default node3 proxysql master:default"
    echo "$0 deploy pmm node1 ps:5.7 pmm-client pmm-server:default"
    exit 0
  fi
fi


if [ "x$1" = "xconfigure" ] ; then
  while (( "$#" )); do
    if [[ "$1" == provider:* ]] ; then
      PROVIDER=$(echo "$1"|cut -d: -f 2)
      case "$PROVIDER" in
        vagrant)
          ;;
        lxdock)
          ;;
        podman)
          ;;
        lxd)
          ;;
        *)
          echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
          exit 1
      esac
    fi
    shift
  done

  :> .anydbver
  echo "PROVIDER=$PROVIDER" >> .anydbver
  echo "LXD_PROFILE=$LXD_PROFILE" >> .anydbver

  exit 0
fi


if [ "x$1" = "xssh" ] ; then
  shift
  NODE="$1"
  if [ "x$NODE" = "x" ] ; then
    NODE=default
  else
    shift
  fi
  case "$PROVIDER" in
    vagrant)
      exec vagrant ssh "$NODE" "$@"
      ;;
    lxdock)
      ;;
    podman)
      exec ./podmanctl ssh "$NODE" "$@"
      ;;
    lxd)
      exec ./lxdctl ssh "$NODE" "$@"
      ;;
    *)
      echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
      exit 1
  esac
fi
if [ "x$1" = "xlist" ] || [ "x$1" = "xls" ] ; then
  case "$PROVIDER" in
    podman)
      exec ./podmanctl list
      ;;
    lxd)
      exec ./lxdctl list
      ;;
    *)
      echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
      exit 1
  esac
  exit 0
fi
if [ "x$1" = "xdestroy" ] ; then
  shift
  NODE="$1"
  if [ "x$NODE" = "x" ] ; then
    NODE=default
  else
    shift
  fi
  case "$PROVIDER" in
    vagrant)
      exec vagrant destroy -f
      ;;
    lxdock)
      exec lxdock destroy -f
      ;;
    podman)
      exec ./podmanctl --destroy
      ;;
    lxd)
      exec ./lxdctl --destroy
      ;;
    *)
      echo "Please select VM/Container provider with $0 configure provider:PROVIDERNAME"
      exit 1
  esac
fi


get_version() {
  if [[ $i == *':'* ]] ; then
    echo "$1" | cut -d: -f2
  else
    echo "$1" | cut -d= -f2
  fi
}

refresh_percona_server_version_info() {
  [ -d .version-info ] || mkdir .version-info
  curl -sL https://repo.percona.com/percona/yum/release/7/RPMS/x86_64/|perl -ne '/Percona-Server-server-\d\d-([^"]*).el7.x86_64.rpm/ and print "$1\n"' > .version-info/percona-server.el7.txt

  curl -sL https://www.percona.com/downloads/Percona-Server-LATEST/ > .version-info/percona-server-80.html
  for VER in $( cat .version-info/percona-server-80.html |perl -ne 'm,option value=\"Percona-Server-LATEST/Percona-Server-([^/]*?)\", and print "$1\n"'|sort -n ) ; do
    curl -sL https://www.percona.com/downloads/Percona-Server-LATEST/Percona-Server-"$VER"/binary/redhat/7/ |grep "$VER"|perl -ne '/percona-server-server-(.*?).el7.x86_64.rpm/ and print "$1\n"'
  done >> .version-info/percona-server.el7.txt
  rm -f .version-info/percona-server-80.html

  curl -sL https://repo.percona.com/percona/yum/release/7/RPMS/x86_64/|perl -ne '/Percona-XtraDB-Cluster-\d\d-([0-9.-]*).el7.x86_64.rpm/ and print "$1\n"' > .version-info/percona-xtradb-cluster.el7.txt
  curl -sL https://repo.percona.com/pxc-80/yum/release/7/RPMS/x86_64/|perl -ne '/percona-xtradb-cluster-([0-9.-]*).el7.x86_64.rpm/ and print "$1\n"' >> .version-info/percona-xtradb-cluster.el7.txt
  curl -sL https://repo.percona.com/percona/yum/release/8/RPMS/x86_64/|perl -ne '/Percona-XtraDB-Cluster-\d\d-([0-9.-]*).el8.x86_64.rpm/ and print "$1\n"' > .version-info/percona-xtradb-cluster.el8.txt

  :> .version-info/mariadb.el7.txt
  cat > .version-info/mariadb.el7.txt <<EOF
10.1.29
EOF

  for maver in 10.3 10.4 10.5 ; do
    curl -sL http://yum.mariadb.org/$maver/centos7-amd64/rpms/| perl -ne '/MariaDB-server-(\d[^"]*).el7.centos.x86_64.rpm/ and print "$1\n"' >> .version-info/mariadb.el7.txt
  done

  for ver in $(grep 10.[3-5] .version-info/mariadb.el7.txt) ; do
    short_ver=$(echo $ver|sed -re 's/-[0-9]+$//')
    for galera_ver in $( curl -sL https://mirrors.ukfast.co.uk/sites/mariadb/mariadb-${short_ver}/yum/centos7-amd64/rpms/|grep galera|grep -v rhel7|sed -re 's/<a href="galera-([0-9]+-)?([^>]+)\.el7\.centos\.x86_64\.rpm">.*$/\2/' ) ; do
      echo -n "$ver "
      echo $galera_ver
    done
  done > .version-info/mariadb-galera.el7.txt

  cat > .version-info/mysql.el7.txt <<EOF
5.6.20-4
5.6.21-2
5.6.22-2
5.6.23-2
5.6.24-2
5.6.25-2
5.6.26-2
5.6.27-2
5.6.28-2
5.6.29-2
5.6.30-2
5.6.31-2
5.6.32-2
5.6.33-2
5.6.34-2
5.6.35-2
5.6.36-2
5.6.37-2
5.6.38-2
5.6.39-2
5.6.40-2
5.6.41-2
5.6.42-2
5.6.43-2
5.6.44-2
5.6.45-2
5.6.46-2
5.6.47-2
5.6.48-2
5.7.10-1
5.7.11-1
5.7.12-1
5.7.13-1
5.7.14-1
5.7.15-1
5.7.16-1
5.7.17-1
5.7.18-1
5.7.19-1
5.7.20-1
5.7.21-1
5.7.22-1
5.7.23-1
5.7.24-1
5.7.25-1
5.7.26-1
5.7.27-1
5.7.28-1
5.7.29-1
5.7.30-1
5.7.31-1
8.0.11-1
8.0.12-1
8.0.13-1
8.0.14-1
8.0.15-1
8.0.16-1
8.0.17-1
8.0.18-1
8.0.19-1
8.0.20-1
8.0.21-1
8.0.22-1
EOF

if test -f /usr/bin/which && which jq &>/dev/null ; then
  curl -s 'https://hub.docker.com/v2/repositories/percona/pmm-server/tags/?page_size=10000' \
    | jq -r '.results|.[]|.name'|egrep '[0-9]*\.[0-9]*\.[0-9]*' \
    | sort -t. -k 1,1n -k 2,2n -k 3,3n \
    > .version-info/pmm-server.txt
else
  cat > .version-info/pmm-server.txt <<EOF
1.17.1
1.17.2
1.17.3
1.17.4
2.0.0
2.0.1
2.1.0
2.2.0
2.2.1
2.2.2
2.3.0
2.4.0
2.5.0
2.6.0
2.6.1
2.8.0
2.9.1
2.10.0
2.10.1
2.11.0
2.11.1
2.12.0
EOF
fi

  cat > .version-info/pmm-client.el7.txt <<EOF
1.10.0-1
1.11.0-1
1.12.0-1
1.13.0-1
1.14.0-1
1.14.1-1
1.15.0-1
1.16.0-1
1.17.0-1
1.17.1-1
1.17.2-1
1.17.3-1
1.17.4-1
2.0.0-5
2.0.1-5
2.1.0-5
2.2.0-6
2.2.1-6
2.2.2-6
2.3.0-6
2.4.0-6
2.5.0-6
2.6.0-6
2.6.1-6
2.8.0-6
2.9.1-6
2.10.0-6
2.10.1-6
2.11.0-6
2.11.1-6
2.12.0-6
2.13.0-6
2.14.0-6
EOF

  cat > .version-info/ppg.el7.txt <<EOF
12.2-4
12.3-1
12.4-2
12.5-1
13.0-1
13.1-1
EOF

  cat > .version-info/pg.el7.txt <<EOF
9.5.15
9.5.23
9.6.20
10.7
10.8
10.9
10.10
10.11
10.12
10.13
10.14
10.15
11.0
11.2
11.3
11.4
11.5
11.6
11.7
11.8
11.9
11.10
12.1
12.2
12.3
12.4
12.5
13.0
13.1
EOF
  cat > .version-info/pg.el8.txt <<EOF
11.0
11.2
11.3
11.4
11.5
11.6
11.7
11.8
11.9
12.1
12.2
12.3
12.4
13.0
13.1
EOF
  cat > .version-info/pko4psmdb.txt <<EOF
0.1.0
0.2.0
0.2.1
0.3.0
1.0.0
1.1.0
1.2.0
1.3.0
1.4.0
1.5.0
1.6.0
EOF
  cat > .version-info/pko4pxc.txt <<EOF
master
0.1.0
0.2.0
0.3.0
1.0.0
1.1.0
1.2.0
1.3.0
1.4.0
1.5.0
1.6.0
1.7.0
EOF
  cat > .version-info/zalando_pg.txt <<EOF
1.0.0
1.1.0
1.2.0
1.3.0
1.3.1
1.4.0
1.5.0
EOF

 cat > .version-info/sysbench.el7.txt <<EOF
1.0.20-6
EOF

 cat > .version-info/proxysql.el7.txt <<EOF
1.3.10-1
1.4.6-1
1.4.7-1
1.4.8-1
1.4.9-1
1.4.10-1
1.4.11-1
1.4.12-1
1.4.13-1
1.4.14-1
1.4.15-1
1.4.16-1
2.0.1-1
2.0.2-1
2.0.3-1
2.0.4-1
2.0.5-1
2.0.6-1
2.0.7-1
2.0.8-1
2.0.9-1
2.0.10-1
2.0.11-1
2.0.12-1
2.0.13-1
2.0.14-1
2.0.15-1
EOF

 cat > .version-info/mydumper.el7.txt <<EOF
0.9.3-41
0.9.5-2
10.1-1
EOF

 cat > .version-info/orchestrator.el7.txt <<EOF
3.0.3-1
3.0.5-1
3.0.6-1
3.0.7-1
3.0.8-1
3.0.9-1
3.0.10-1
3.0.11-1
3.0.12-1
3.0.13-1
3.0.14-1
3.1.0-1
3.1.2-1
3.1.3-1
3.1.4-1
3.2.2-1
3.2.3-1
EOF

curl -sL https://repo.percona.com/percona/yum/release/7/RPMS/x86_64/|perl -ne '/Percona-Server-MongoDB(-\d\d)?-server-([^"]*).el7.x86_64.rpm/ and print "$2\n"'|sort -n --field-separator=. -k 1,1 -k 2,2 -k 3,3 > .version-info/psmdb.el7.txt

curl -sL https://repo.percona.com/psmdb-40/yum/release/7/RPMS/x86_64/ |perl -ne '/percona-server-mongodb(-\d\d)?-server-([^"]*).el7.x86_64.rpm/ and print "$2\n"'|sort -n --field-separator=. -k 1,1 -k 2,2 -k 3,3 >> .version-info/psmdb.el7.txt

curl -sL https://repo.percona.com/pdmdb-4.2/yum/release/7/RPMS/x86_64/ |perl -ne '/percona-server-mongodb(-\d\d)?-server-([^"]*).el7.x86_64.rpm/ and print "$2\n"'|sort -n --field-separator=. -k 1,1 -k 2,2 -k 3,3 >> .version-info/psmdb.el7.txt

curl -sL https://repo.percona.com/pdmdb-4.4/yum/release/7/RPMS/x86_64/ |perl -ne '/percona-server-mongodb(-\d\d)?-server-([^"]*).el7.x86_64.rpm/ and print "$2\n"'|sort -n --field-separator=. -k 1,1 -k 2,2 -k 3,3 >> .version-info/psmdb.el7.txt
}


if [ "x$1" = "xupdate" ] ; then
  refresh_percona_server_version_info
  exit 0
fi


join_ws()  { local IFS=; local s="${*/#/$1}"; echo "${s#"$1$1$1"}"; }


deploy_node() {
  [ -f .version-info/percona-server.el7.txt ] || refresh_percona_server_version_info
  NODE="$1"
  DEP_ENV=""
  shift
  arr=("$@")
  ROW_REPLICATION=0
  UTF8ENC=0
  FEATURES=()
  for i in "${arr[@]}";
  do
    if [[ $i == "hostname:"* ]] || [[ $i == "hn:"* ]] || [[ $i == "name:"* ]] ; then
      HOST=$(get_version "$i")
      DEP_ENV="$DEP_ENV HOSTNAME=$HOST"
    fi

    if [[ $i == "virtual-machine" ]] ; then
      DEP_ENV="$DEP_ENV NODE_VM=1"
    fi

    if [[ $i == "os:"* ]] || [[ $i == "operating-system:"* ]] ; then
      NODE_OS=$(get_version "$i")
      case "$NODE_OS" in
        el7)
          NODE_OS=el7
          ;;
        centos7)
          NODE_OS=el7
          ;;
        centos-7)
          NODE_OS=el7
          ;;
        CentOS7)
          NODE_OS=el7
          ;;
        CentOS-7)
          NODE_OS=el7
          ;;
        el8)
          NODE_OS=el8
          ;;
        centos8)
          NODE_OS=el8
          ;;
        centos-8)
          NODE_OS=el8
          ;;
        CentOS8)
          NODE_OS=el8
          ;;
        CentOS-8)
          NODE_OS=el8
          ;;
        *)
          :
      esac

      DEP_ENV="$DEP_ENV NODE_OS=$NODE_OS"
    fi

    if [[ $i == "percona-server" ]] || [[ $i == "percona-server:"* ]] || [[ $i == "ps" ]] || [[ $i == "ps:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/percona-server.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PS=$VER"
      else
        VER=$(tail -n 1 .version-info/percona-server.el7.txt)
        DEP_ENV="$DEP_ENV PS=$VER"
      fi
    fi
    if [[ $i == "mysql" ]] || [[ $i == "mysql:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/mysql.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV MYSQL=$VER"
      else
        VER=$(tail -n 1 .version-info/mysql.el7.txt)
        DEP_ENV="$DEP_ENV MYSQL=$VER"
      fi
    fi
    if [[ $i == "mysql-router" ]] || [[ $i == "mysql-router:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/mysql.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV MYSQL_ROUTER=$VER"
      else
        VER=$(tail -n 1 .version-info/mysql.el7.txt)
        DEP_ENV="$DEP_ENV MYSQL_ROUTER=$VER"
      fi
    fi
    if [[ $i == "sysbench" ]] || [[ $i == "sysbench:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/sysbench.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV SYSBENCH=$VER"
      else
        VER=$(tail -n 1 .version-info/sysbench.el7.txt)
        DEP_ENV="$DEP_ENV SYSBENCH=$VER"
      fi
    fi
    if [[ $i == "proxysql" ]] || [[ $i == "proxysql:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/proxysql.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PROXYSQL=$VER"
      else
        VER=$(tail -n 1 .version-info/proxysql.el7.txt)
        DEP_ENV="$DEP_ENV PROXYSQL=$VER"
      fi
    fi
    if [[ $i == "mydumper" ]] || [[ $i == "mydumper:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/mydumper.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV MYDUMPER=$VER"
      else
        VER=$(tail -n 1 .version-info/mydumper.el7.txt)
        DEP_ENV="$DEP_ENV MYDUMPER=$VER"
      fi
    fi
    if [[ $i == "orchestrator" ]] || [[ $i == "orchestrator:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/orchestrator.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV ORCHESTRATOR=$VER"
      else
        VER=$(tail -n 1 .version-info/orchestrator.el7.txt)
        DEP_ENV="$DEP_ENV ORCHESTRATOR=$VER"
      fi
    fi
    if [[ $i == "percona-xtradb-cluster" ]] || [[ $i == "percona-xtradb-cluster:"* ]] || [[ $i == "pxc" ]] || [[ $i == "pxc:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/percona-xtradb-cluster.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PXC=$VER "
      else
        VER=$(tail -n 1 .version-info/percona-xtradb-cluster.el7.txt)
        DEP_ENV="$DEP_ENV PXC=$VER "
      fi
    fi
    if [[ $i == "psmdb" ]] || [[ $i == "psmdb:"* ]] || [[ $i == "mongo" ]] || [[ $i == "mongo:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/psmdb.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PSMDB=$VER DB_USER=dba DB_PASS=secret START=1 DB_OPTS=mongo/enable_wt.conf"
      else
        VER=$(tail -n 1 .version-info/psmdb.el7.txt)
        DEP_ENV="$DEP_ENV PSMDB=$VER DB_USER=dba DB_PASS=secret START=1 DB_OPTS=mongo/enable_wt.conf"
      fi
    fi
    if [[ $i == "mongos-cfg:"* ]] ; then
      MONGOS_CFG=$(get_version "$i")
      DEP_ENV="$DEP_ENV MONGOS_CFG=$MONGOS_CFG "
    fi
    if [[ $i == "mongos-shard:"* ]] ; then
      MONGOS_SHARD=$(get_version "$i")
      DEP_ENV="$DEP_ENV MONGOS_SHARD=$MONGOS_SHARD "
    fi

    if [[ $i == "mariadb" ]] || [[ $i == "mariadb:"* ]] || [[ $i == "maria" ]] || [[ $i == "maria:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/mariadb.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV MARIADB=$VER"
      else
        VER=$(tail -n 1 .version-info/mariadb.el7.txt)
        DEP_ENV="$DEP_ENV MARIADB=$VER"
      fi
    fi
    if [[ $i == "mariadb-galera" ]] || [[ $i == "mariadb-galera:"* ]] || [[ $i == "mariadb-cluster" ]] || [[ $i == "mariadb-cluster:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/mariadb.el7.txt |tail -n 1)
	GALERA_VER=$(grep "$VER" .version-info/mariadb-galera.el7.txt|cut -d' ' -f2|tail -n 1 )
        DEP_ENV="$DEP_ENV MARIADB=$VER GALERA=$GALERA_VER "
      else
        VER=$(tail -n 1 .version-info/mariadb.el7.txt)
	GALERA_VER=$(grep "$VER" .version-info/mariadb-galera.el7.txt|cut -d' ' -f2|tail -n 1 )
        DEP_ENV="$DEP_ENV MARIADB=$VER GALERA=$GALERA_VER "
      fi
    fi
    if [[ $i == "postgresql" ]] || [[ $i == "postgresql:"* ]] || [[ $i == "pg" ]] || [[ $i == "pg:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "^$VER" .version-info/pg.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PG=$VER"
      else
        VER=$(tail -n 1 .version-info/pg.el7.txt)
        DEP_ENV="$DEP_ENV PG=$VER"
      fi
    fi
    if [[ $i == "percona-postgresql" ]] || [[ $i == "percona-postgresql:"* ]] || [[ $i == "ppg" ]] || [[ $i == "ppg:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/ppg.el7.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PPGSQL=$VER"
      else
        VER=$(tail -n 1 .version-info/ppg.el7.txt)
        DEP_ENV="$DEP_ENV PPGSQL=$VER"
      fi
    fi
    if [[ $i == "k8s-mongo" ]] || [[ $i == "k8s-mongo:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pko4psmdb.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PKO4PSMDB=$VER"
      else
        VER=$(tail -n 1 .version-info/pko4psmdb.txt)
        DEP_ENV="$DEP_ENV PKO4PSMDB=$VER"
      fi
    fi
    if [[ $i == "k8s-pxc" ]] || [[ $i == "k8s-pxc:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pko4pxc.txt |tail -n 1)
        DEP_ENV="$DEP_ENV PKO4PXC=$VER"
      else
        VER=$(tail -n 1 .version-info/pko4pxc.txt)
        DEP_ENV="$DEP_ENV PKO4PXC=$VER"
      fi
    fi
    if [[ $i == "k8s-minio" ]] ; then
        DEP_ENV="$DEP_ENV K8S_MINIO=yes"
    fi
    if [[ $i == "k8s-pmm" ]] || [[ $i == "k8s-pmm:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pmm-server.txt |tail -n 1)
      else
        VER=$(tail -n 1 .version-info/pmm-server.txt)
      fi
      DEP_ENV="$DEP_ENV K8S_PMM=$VER"
    fi
    if [[ $i == "replica-set:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        RSNAME=$(get_version "$i")
      else
        RSNAME="rs0"
      fi
      DEP_ENV="$DEP_ENV REPLICA_SET=$RSNAME"
      test -f secret/"$RSNAME"-keyfile || openssl rand -base64 756 > secret/"$RSNAME"-keyfile
    fi
    if [[ $i == "k8s-pg" ]] || [[ $i == "k8s-pg:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/zalando_pg.txt |tail -n 1)
        DEP_ENV="$DEP_ENV K8S_PG=$VER"
      else
        VER=$(tail -n 1   .version-info/zalando_pg.txt)
        DEP_ENV="$DEP_ENV K8S_PG=$VER"
      fi
    fi
    if [[ $i == "master_ip" ]] || [[ $i == "master_ip:"* ]] || [[ $i == "master" ]] || [[ $i == "master:"* ]] || [[ $i == "leader:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        MASTER_NODE=$(get_version "$i")
        DEP_ENV="$DEP_ENV DB_IP=$MASTER_NODE "
      else
        DEP_ENV="$DEP_ENV DB_IP=default "
      fi
    fi
    if [[ $i == "etcd-ip:"* ]] ; then
        ETCD_NODE=$(get_version "$i")
        DEP_ENV="$DEP_ENV ETCD_IP=$ETCD_NODE "
    fi

    if [[ $i == "group-replication" ]] ; then
      DEP_ENV="$DEP_ENV REPLICATION_TYPE=group "
    fi
    if [[ $i == "cluster:"* ]] ; then
        CLUSTER_NAME=$(get_version "$i")
        DEP_ENV="$DEP_ENV CLUSTER=$CLUSTER_NAME "
    fi

    if [[ $i == "galera-master" ]] || [[ $i == "galera-master:"* ]] || [[ $i == "galera-leader:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        MASTER_NODE=$(get_version "$i")
        DEP_ENV="$DEP_ENV DB_IP=$MASTER_NODE REPLICATION_TYPE=galera "
      else
        DEP_ENV="$DEP_ENV DB_IP=default REPLICATION_TYPE=galera "
      fi
    fi
    if [[ $i == "samba-ad" ]] || [[ $i == "samba" ]] ; then
        DEP_ENV="$DEP_ENV SAMBA_AD=1 "
    fi
    if [[ $i == "samba-dc:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        MASTER_NODE=$(get_version "$i")
        DEP_ENV="$DEP_ENV SAMBA_IP=$MASTER_NODE SAMBA_PASS=\"verysecretpassword1^\" DB_USER=dba DB_PASS=secret "
      else
        DEP_ENV="$DEP_ENV SAMBA_IP=default "
      fi
    fi
    if [[ $i == "vault" ]] ; then
      DEP_ENV="$DEP_ENV VAULT=1"
    fi
    if [[ $i == "patroni" ]] ; then
      FEATURES+=( development )
      DEP_ENV="$DEP_ENV PATRONI=1"
    fi
    if [[ $i == "rbr" ]] || [[ $i == "row" ]] || [[ $i == "row-based-replication" ]] || [[ $i == "row_based_replication" ]] ; then
      ROW_REPLICATION=1
    fi
    if [[ $i == "backup" ]] ; then
      FEATURES+=( backup )
    fi
    if [[ $i == "gtid" ]] ; then
      FEATURES+=( gtid )
    fi
    if [[ $i == "garbd" ]] ; then
      FEATURES+=( garbd )
    fi
    if [[ $i == "development" || $i == "devel" ]] ; then
      FEATURES+=( development )
    fi
    if [[ $i == "master" ]] ; then
      FEATURES+=( master )
    fi
    if [[ $i == "utf8" ]] || [[ $i == "utf8mb3" ]] ; then
      UTF8ENC=1
    fi
    if [[ $i == "configsrv" ]] ; then
      DEP_ENV="$DEP_ENV MONGO_CONFIGSRV=1"
    fi
    if [[ $i == "shardsrv" ]] ; then
      DEP_ENV="$DEP_ENV MONGO_SHARDSRV=1"
    fi
    if [[ $i == "pmm" ]] || [[ $i == "pmm:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pmm-server.txt |tail -n 1)
      else
        VER=$(tail -n 1 .version-info/pmm-server.txt)
      fi
      DEP_ENV="$DEP_ENV PMM_SERVER=$VER DB_PASS=secret"
    fi
    if [[ $i == "pmm-client" ]] || [[ $i == "pmm-client:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VER=$(get_version "$i")
        VER=$(grep "$VER" .version-info/pmm-client.el7.txt |tail -n 1)
      else
        VER=$(tail -n 1 .version-info/pmm-client.el7.txt)
      fi
      DEP_ENV="$DEP_ENV PMM_CLIENT=$VER"
    fi
    if [[ $i == "pmm-server" ]] || [[ $i == "pmm-server:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        PMM_NODE=$(get_version "$i")
      else
        PMM_NODE=default
      fi
      DEP_ENV="$DEP_ENV PMM_URL=$PMM_NODE"
    fi
    if [[ $i == "vault-server" ]] || [[ $i == "vault-server:"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        VAULT_NODE=$(get_version "$i")
      else
        VAULT_NODE=default
      fi
      DEP_ENV="$DEP_ENV VAULT_URL=$VAULT_NODE"
    fi

    if [[ $i == "ldap" ]] || [[ $i == "ldap-server"* ]] ; then
      DEP_ENV="$DEP_ENV LDAP_SERVER=1 DB_USER=dba DB_PASS=secret"
    fi
    if [[ $i == "ldap-master" ]] || [[ $i == "ldap-master"* ]] || [[ $i == "ldap-leader"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        LDAP_NODE=$(get_version "$i")
      else
        LDAP_NODE=default
      fi
      DEP_ENV="$DEP_ENV LDAP_IP=$LDAP_NODE DB_USER=dba DB_PASS=secret"
    fi
    if [[ $i == "k3s-master" ]] || [[ $i == "k3s-master"* ]] || [[ $i == "k3s-leader"* ]] ; then
      if [[ $i == *':'* ]] || [[ $i == *'='* ]] ; then
        MASTER_NODE=$(get_version "$i")
      else
        MASTER_NODE=default
      fi
      DEP_ENV="$DEP_ENV K3S_URL=$MASTER_NODE "
    fi
    if [[ $i == "k3s" ]] || [[ $i == "k3s:"* ]] || [[ $i == "k8s" ]] || [[ $i == "kubernetes" ]] ; then
      DEP_ENV="$DEP_ENV K3S=latest"
    fi
    if [[ $i == "kube-config:"* ]] ; then
      KUBE_CONFIG=$(get_version "$i")
      DEP_ENV="$DEP_ENV KUBE_CONFIG=$KUBE_CONFIG"
    fi
  done

  if [[ "$DEP_ENV" != *DB_USER* && "$DEP_ENV" == *'PG='* ]] ; then
    DEP_ENV="$DEP_ENV DB_USER=postgres"
  elif [[ "$DEP_ENV" != *DB_USER* ]] ; then
    DEP_ENV="$DEP_ENV DB_USER=root"
  fi
  [[ "$DEP_ENV" == *DB_PASS* ]] || DEP_ENV="$DEP_ENV DB_PASS=secret"
  [[ "$DEP_ENV" == *START* ]] || DEP_ENV="$DEP_ENV START=1"
  if [[ "$DEP_ENV" == *'GALERA='* ]] || [[ "$DEP_ENV" == *'PXC='* ]] ; then
    [[ "$DEP_ENV" == *CLUSTER=* ]] || DEP_ENV="$DEP_ENV CLUSTER=cluster1"
    CLUSTER_NAME=$(echo "$DEP_ENV" | sed -re 's/^.*CLUSTER=([^ ]+).*$/\1/' )
    test -f secret/${CLUSTER_NAME}-ssl.tar.gz && rm -f secret/${CLUSTER_NAME}-ssl.tar.gz
  fi
  if [[ "$DEP_ENV" == *'PATRONI='* ]] ; then
    [[ "$DEP_ENV" == *CLUSTER=* ]] || DEP_ENV="$DEP_ENV CLUSTER=cluster1"
  fi
  if  [[ "$DEP_ENV" == *DB_OPTS* ]] ; then
    :
  elif [[ "$DEP_ENV" == *'GALERA='* ]] && [[ "$DEP_ENV" == *'MARIADB=10.3'* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mariadb/galera3.cnf"
  elif [[ "$DEP_ENV" == *'GALERA='* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mariadb/galera.cnf"
  elif [[ "$DEP_ENV" == *'PXC=5'* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/pxc5657.cnf"
  elif [[ "$DEP_ENV" == *'PXC=8'* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/pxc8-repl-gtid.cnf"
  elif [[ "$DEP_ENV" == *'REPLICATION_TYPE=group'* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/gr.cnf"
  elif [[ "$DEP_ENV" == *'PS='* && $ROW_REPLICATION == 1 ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/async-repl-gtid-row.cnf"
  elif [[ "$DEP_ENV" == *'PS='* && $UTF8ENC == 1 ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/async-repl-gtid-utf8.cnf"
  elif [[ "$DEP_ENV" == *'PS='* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mysql/async-repl-gtid.cnf"
  elif [[ "$DEP_ENV" == *'MARIADB='* && $ROW_REPLICATION == 1 ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mariadb/async-repl-gtid-row.cnf"
  elif [[ "$DEP_ENV" == *'MARIADB='* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=mariadb/async-repl-gtid.cnf"
  elif [[ "$DEP_ENV" == *'PG=9'* ]] || [[ "$DEP_ENV" == *'PG=10'* ]] || [[ "$DEP_ENV" == *'PG=11'* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=postgresql/logical9.conf"
  elif [[ "$DEP_ENV" == *'PG='* ]] ; then
    DEP_ENV="$DEP_ENV DB_OPTS=postgresql/logical.conf"
  fi

  if [[ ${#FEATURES[@]} != 0 ]] ; then
    DB_FEATURES=$( join_ws , "${FEATURES[@]}" )
    DEP_ENV="$DEP_ENV DB_FEATURES=$DB_FEATURES"
  fi


  case "$PROVIDER" in
    vagrant)
      echo "$DEP_ENV vagrant provision $NODE"
      ;;
    lxdock)
      echo "$DEP_ENV lxdock provision $NODE"
      ;;
    podman)
      echo "$DEP_ENV ansible-playbook -i ansible_hosts --limit $USER.$NODE playbook.yml"
      ;;
    lxd)
      echo "$DEP_ENV ansible-playbook -i ansible_hosts --limit $USER.$NODE playbook.yml"
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac
}

find_node_ip() {
  NODE="$1"
  case "$PROVIDER" in
    vagrant)
      vagrant ssh $NODE -c /vagrant/tools/node_ip.sh 2>/dev/null
      ;;
    lxdock)
      lxdock shell $NODE -c /vagrant/tools/node_ip.sh 2>/dev/null
      ;;
    podman)
      sed -ne '/'$NODE'/ {s/^.*ansible_host=//;s/ .*$//;p}' ansible_hosts
      ;;
    lxd)
      sed -ne '/'$NODE'/ {s/^.*ansible_host=//;s/ .*$//;p}' ansible_hosts
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac
}

if [ "x$1" = "xip" ] ; then
  shift
  NODE="$1"
  if [ "x$NODE" = "x" ] ; then
    NODE=default
  else
    shift
  fi
  find_node_ip "$NODE"
  exit 0
fi


find_samba_sid() {
  NODE="$1"
  SAMBA_IP=$(find_node_ip $NODE)
  case "$PROVIDER" in
    vagrant)
      vagrant ssh $NODE -- "/opt/samba/bin/wbinfo -D PERCONA|grep SID|awk '{print \$3}'" 2>/dev/null
      ;;
    lxdock)
      lxdock shell $NODE -c bash -c "/opt/samba/bin/wbinfo -D PERCONA|grep SID|awk '{print \$3}'" 2>/dev/null
      ;;
    podman)
      ssh -i secret/id_rsa root@$SAMBA_IP -o StrictHostKeyChecking=no /opt/samba/bin/wbinfo -D PERCONA|grep SID|awk '{print $3}' 2>/dev/null
      ;;
    lxd)
      ssh -i secret/id_rsa root@$SAMBA_IP -o StrictHostKeyChecking=no /opt/samba/bin/wbinfo -D PERCONA|grep SID|awk '{print $3}' 2>/dev/null
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac
}


find_node_token() {
  NODE="$1"
  case "$PROVIDER" in
    lxdock)
      lxdock shell $NODE -c cat /var/lib/rancher/k3s/server/node-token
      ;;
    lxd)
      MASTER_IP=$(find_node_ip $NODE)
      ssh -i secret/id_rsa root@$MASTER_IP -o StrictHostKeyChecking=no cat /var/lib/rancher/k3s/server/node-token
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac
}

if [ "x$1" = "xdeploy" ] ; then
  PRIV_CONTAINER_REQUIRED=0
  HOSTNAMES_CMD=''
  OS_CMD=''
  VM_CMD=''
  DEPLARGS=()
  DEPLOY_CMDS=()
  NODE=default
  declare -A ALL_NODES
  ALL_NODES[$NODE]=1
  shift
  if [[ "$1" == default ]] ; then
    shift
  fi

  while (( "$#" )); do
    while (( "$#" )); do
      if [[ "$1" == node* ]] || [[ "$1" == default && NODE != default ]] ; then
        break
      fi
      DEPLARGS+=("$1")
      shift
    done
    DEPCMD=$(deploy_node $NODE "${DEPLARGS[@]}")
    echo "$DEPCMD"|egrep -q 'PMM_SERVER|K8S|K3S|PKO|SAMBA_AD' && PRIV_CONTAINER_REQUIRED=1
    if [[ "$DEPCMD" == *"HOSTNAME="* ]] ; then
      HOSTNAMES_CMD="$HOSTNAMES_CMD --hostname $NODE="$(echo "$DEPCMD"| sed -re 's/^.*HOSTNAME=([^ ]+) .*/\1/')
    fi
    if [[ "$DEPCMD" == *"NODE_OS="* ]] ; then
      OS_CMD="$OS_CMD --os $NODE="$(echo "$DEPCMD"| sed -re 's/^.*NODE_OS=([^ ]+) .*/\1/')
    fi
    if [[ "$DEPCMD" == *"NODE_VM="* ]] ; then
      VM_CMD="$VM_CMD --vm $NODE"
    fi

    DEPLOY_CMDS+=("$DEPCMD")
    ALL_NODES[$NODE]=1
    if [[ "$1" == node* || "$1" == default ]] ; then
      NODE="$1"
      shift
    fi

    DEPLARGS=()
  done

  case "$PROVIDER" in
    vagrant)
      ;;
    lxdock)
      ;;
    podman)
      ./podmanctl --destroy
      ./podmanctl --nodes ${#ALL_NODES[@]}
      ;;
    lxd)
      ./lxdctl --destroy
      if [[ $PRIV_CONTAINER_REQUIRED == 1 ]] ; then
        echo "./lxdctl --nodes ${#ALL_NODES[@]} --privileged $HOSTNAMES_CMD $OS_CMD $VM_CMD"
        ./lxdctl --nodes ${#ALL_NODES[@]} --privileged $HOSTNAMES_CMD $OS_CMD $VM_CMD
      else
        echo "./lxdctl --nodes ${#ALL_NODES[@]} $HOSTNAMES_CMD $OS_CMD $VM_CMD"
        ./lxdctl --nodes ${#ALL_NODES[@]} $HOSTNAMES_CMD $OS_CMD $VM_CMD
      fi
      ;;
    *)
      echo "Please select VM/Container provider with $0 config provider:PROVIDERNAME"
      exit 1
  esac

  for i in "${DEPLOY_CMDS[@]}"; do
    if echo "$i" | grep -q DB_IP ; then
      MASTER_NODE=$(echo "$i" | perl -ne '/DB_IP=(\S*) / and print $1')
      MASTER_IP=$(find_node_ip $MASTER_NODE)
      i=$(echo "$i"|sed -e "s/DB_IP=$MASTER_NODE/DB_IP=$MASTER_IP/g")
    fi
    if echo "$i" | grep -q LDAP_IP ; then
      LDAP_NODE=$(echo "$i" | perl -ne '/LDAP_IP=(\S*) / and print $1')
      LDAP_IP=$(find_node_ip $LDAP_NODE)
      i=$(echo "$i"|sed -e "s/LDAP_IP=$LDAP_NODE/LDAP_IP=$LDAP_IP/g")
    fi
    if echo "$i" | grep -q ETCD_IP ; then
      ETCD_NODE=$(echo "$i" | perl -ne '/ETCD_IP=(\S*) / and print $1')
      ETCD_IP=$(find_node_ip $ETCD_NODE)
      i=$(echo "$i"|sed -e "s/ETCD_IP=$ETCD_NODE/ETCD_IP=$ETCD_IP/g")
    fi
    if echo "$i" | grep -q K3S_URL ; then
      MASTER_NODE=$(echo "$i" | perl -ne '/K3S_URL=(\S*) / and print $1')
      MASTER_IP=$(find_node_ip $MASTER_NODE)
      MASTER_TOKEN=$(find_node_token $MASTER_NODE)
      i=$(echo "$i"|sed -e "s,K3S_URL=$MASTER_NODE,K3S_URL=https://$MASTER_IP:6443 K3S_TOKEN=$MASTER_TOKEN,g")
    fi
    if echo "$i" | grep -q PMM_URL ; then
      PMM_NODE=$(echo "$i" | perl -ne '/PMM_URL=(\S*) / and print $1')
      PMM_IP=$(find_node_ip $PMM_NODE)
      i=$(echo "$i"|sed -e "s,PMM_URL=$PMM_NODE,PMM_URL=https://admin:secret@$PMM_IP:443,g")
    fi
    if echo "$i" | grep -q SAMBA_IP ; then
      MASTER_NODE=$(echo "$i" | perl -ne '/SAMBA_IP=(\S*) / and print $1')
      MASTER_IP=$(find_node_ip $MASTER_NODE)
      SAMBA_SID=$(find_samba_sid $MASTER_NODE)
      i=$(echo "$i"|sed -e "s/SAMBA_IP=$MASTER_NODE/SAMBA_IP=$MASTER_IP SAMBA_SID=$SAMBA_SID/g")
    fi
    if echo "$i" | grep -q MONGOS_CFG ; then
      CFG_NODES_LIST=( )
      CFG_NODES_FULL=$(echo "$i" | perl -ne '/MONGOS_CFG=(\S*) / and print $1')
      CFG_NODES_RS=$(echo "$i" | perl -ne '/MONGOS_CFG=(\S*)\/(\S*) / and print $1')
      CFG_NODES=$(echo "$i" | perl -ne '/MONGOS_CFG=(\S*)\/(\S*) / and print $2')
      for n in $(echo "$CFG_NODES"|tr , '\n')
      do
        n_ip=$(find_node_ip $n)
        CFG_NODES_LIST+=( ${n_ip}:27017 ) 
      done
      MONGOS_CFG=$( join_ws , "${CFG_NODES_LIST[@]}" )
      i=$(echo "$i"|sed -e "s|MONGOS_CFG=$CFG_NODES_FULL|MONGOS_CFG=$CFG_NODES_RS/$MONGOS_CFG|g")
    fi
    if echo "$i" | grep -q MONGOS_SHARD ; then
      SHARD_NODES_LIST=( )
      SHARD_NODES_FULL=$(echo "$i" | perl -ne '/MONGOS_SHARD=(\S*) / and print $1')
      SHARD_NODES_RS=$(echo "$i" | perl -ne '/MONGOS_SHARD=(\S*)\/(\S*) / and print $1')
      SHARD_NODES=$(echo "$i" | perl -ne '/MONGOS_SHARD=(\S*)\/(\S*) / and print $2')
      for n in $(echo "$SHARD_NODES"|tr , '\n')
      do
        n_ip=$(find_node_ip $n)
        SHARD_NODES_LIST+=( ${n_ip}:27017 ) 
      done
      MONGOS_SHARD=$( join_ws , "${SHARD_NODES_LIST[@]}" )
      i=$(echo "$i"|sed -e "s|MONGOS_SHARD=$SHARD_NODES_FULL|MONGOS_SHARD=$SHARD_NODES_RS/$MONGOS_SHARD|g")
    fi

    printf "%s\n" "$i"
    bash -c "$i"

    # after reploy node actions
    if echo "$i" | grep -q CLUSTER= && echo "$i" | grep -q PXC=8. ; then
      NODE=$(echo "$i" |sed -re 's/^.*--limit [^.]+\.([^ ]+) playbook\.yml.*$/\1/')
      CLUSTER_NAME=$(echo "$i" | sed -re 's/^.*CLUSTER=([^ ]+).*$/\1/' )
      test -f secret/${CLUSTER_NAME}-ssl.tar.gz || ./anydbver \
        ssh $NODE tar cz \
          /var/lib/mysql/ca.pem \
          /var/lib/mysql/ca-key.pem \
          /var/lib/mysql/client-cert.pem \
          /var/lib/mysql/client-key.pem \
          /var/lib/mysql/server-cert.pem \
          /var/lib/mysql/server-key.pem > secret/${CLUSTER_NAME}-ssl.tar.gz 2>/dev/null
    fi

    if echo "$i" | grep -q VAULT= ; then
      NODE=$(echo "$i" |sed -re 's/^.*--limit [^.]+\.([^ ]+) playbook\.yml.*$/\1/')
      ./anydbver ssh $NODE tar c /etc/vault.d/ca.crt /root/.vault-token > secret/vault-client.tar
    fi
  done

fi

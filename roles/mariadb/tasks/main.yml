---
# tasks file for mariadb
- name: Setup yum repository
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  copy:
    content: |
      [mariadb]
      name = MariaDB
      baseurl = http://yum.mariadb.org/{{ mariadb_version | regex_replace('^([0-9]+)\.([0-9]+)\..*$', '\1.\2') }}/{{ 'centos' if ansible_distribution == 'CentOS' else 'rhel' }}{{ ansible_distribution_version  | regex_replace('^([0-9]+)\..*$', '\1') }}-amd64
      gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
      gpgcheck=1
      module_hotfixes=1
    dest: /etc/yum.repos.d/MariaDB.repo

- name: install MariaDB packages
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  yum:
    state: present
    name: >-
      {{
        (os[dist][soft][mariadb_version].install_packages if mariadb_version in os[dist][soft] else os[dist][soft].install_packages) +
        ( [] if galera == '' or os[dist][soft].galera_packages == '' else
          os[dist][soft].galera_packages) +
        ( [] if debug_packages == '' else
          os[dist][soft].install_debug_packages) +
        ( [] if not ( rocksdb_enabled|bool and 'rocksdb_packages' in os[dist][soft] ) else
          os[dist][soft].rocksdb_packages)
      }}

- name: Apply database options from file
  when: db_opts_file != ''
  command:
    cmd: >-
      /bin/bash /vagrant/tools/apply_mysql_conf.sh
      "{{ os[dist][soft].cnf_file }}"
      "/vagrant/configs/{{ db_opts_file }}"
      "{{cluster_name}}"
      "{{db_user}}"
      "{{db_password}}"
    creates: "/root/{{ db_opts_file | basename }}.applied"

- name: Create data directory
  when: db_password != ''
  command:
    cmd: >-
      /bin/bash /vagrant/tools/create_mysql_db_with_password.sh
      "{{ db_password }}"
      "oldgrant"
      "{{os[dist][soft].systemd_service}}"
    creates: /root/.my.cnf

- name: Start systemd unit
  when:  start_db == '1'
  systemd:
    name: "{{os[dist][soft].systemd_service}}"
    state: started

- name: Setup and start replication
  when: master_ip != ''
  shell:
    cmd: /bin/bash /vagrant/tools/setup_mysql_replication.sh "{{ 'gtid' if replication_type == '' else replication_type }}" "{{ master_ip }}" root "{{ db_password }}" "{{soft}}" "{{ os[dist][soft].cnf_file }}" "{{os[dist][soft].systemd_service}}" "{{'cluster1' if cluster_name == '' else cluster_name}}"
    creates: /root/replication.configured

# PMM
- name: Install Percona yum Repository
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and pmm_client_version != ""
  block:
    - name: install percona yum repo
      yum:
        name: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
        state: present

- name: install PMM client
  when: pmm_client_version != ""
  package:
    name: "{{item}}"
    state: present
  with_items: "{{os[dist].pmm_client.install_packages }}"
- name: Setup pmm-admin
  when: pmm_client_version != '' and pmm_url != ''
  register: pmm_admin_config
  changed_when: "'already exists' not in pmm_admin_config.stdout"
  shell:
    cmd: '/usr/bin/pmm-admin config --server-insecure-tls --server-url="{{pmm_url}}" || true'

- name: Setup pmm client mysql
  when: pmm_client_version != '' and pmm_url != '' and ( percona_server_version != '' or mariadb_version != '' )
  register: pmm_admin_mysql_config
  changed_when: "'already exists' not in pmm_admin_mysql_config.stdout"
  shell:
    cmd: /usr/bin/pmm-admin add mysql --query-source="{{ 'perfschema' if 'pmm_perfschema' in db_features.split(',') else 'slowlog' }}" --username="{{db_user}}" --password="{{db_password}}"

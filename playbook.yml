- name: install percona server
  hosts: all
  become: yes
  vars:
    sync_is_required: "{{ lookup('vars', 'extra_sync_is_required', default=lookup('env', 'SYNC', default='') ) }}"
    dist: >-
      {{
      'el7' if (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux') and ansible_distribution_version.startswith('7') else
      'el8' if (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux') and ansible_distribution_version.startswith('8') else
      'bionic' if ansible_distribution_release == 'bionic' else
      'focal' if ansible_distribution_release == 'focal' else
      ''
      }}
    percona_server_version: "{{ lookup('vars', 'extra_percona_server_version', default=lookup('env', 'PS', default='') ) }}"
    rocksdb_enabled: "{{ lookup('vars', 'extra_rocksdb_enabled', default=lookup('env', 'ROCKSDB', default='') ) }}"
    percona_xtrabackup_version: "{{ lookup('vars', 'extra_percona_xtrabackup_version', default=lookup('env','PXB',default='') ) }}"
    percona_xtradb_cluster_version: "{{ lookup('vars', 'extra_percona_xtradb_cluster_version', default=lookup('env','PXC',default='') ) }}"
    percona_xtradb_cluster_galera: "{{ lookup('vars', 'extra_percona_xtradb_cluster_galera', default=lookup('env','PXC_GALERA',default='') ) }}"
    psmdb_version: "{{ lookup('vars', 'extra_psmdb_version', default=lookup('env','PSMDB',default='') ) }}"
    pbm_version: "{{ lookup('vars', 'extra_pbm_version', default=lookup('env','PBM',default='') ) }}"
    pmm_server_version: "{{ lookup('vars', 'extra_pmm_server_version', default=lookup('env','PMM_SERVER',default='') ) }}"
    pmm_client_version: "{{ lookup('vars', 'extra_pmm_client_version', default=lookup('env','PMM_CLIENT',default='') ) }}"
    pmm_url: "{{ lookup('vars', 'extra_pmm_url', default=lookup('env','PMM_URL',default='') ) }}"
    vault_url: "{{ lookup('vars', 'extra_vault_url', default=lookup('env','VAULT_URL',default='') ) }}"
    vault_version: "{{ lookup('vars', 'extra_percona_vault_version', default=lookup('env', 'VAULT', default='') ) }}"
    percona_postgresql_version: "{{ lookup('vars', 'extra_percona_postgresql_version', default=lookup('env', 'PPGSQL', default='') ) }}"
    patroni_version: "{{ lookup('vars', 'extra_percona_patroni_version', default=lookup('env', 'PATRONI', default='') ) }}"
    pgpool_version: "{{ lookup('vars', 'extra_pgpool_version', default=lookup('env', 'PGPOOL', default='') ) }}"
    odyssey_version: "{{ lookup('vars', 'extra_odyssey_version', default=lookup('env', 'ODYSSEY', default='') ) }}"
    walg_version:  "{{ lookup('vars', 'extra_walg_version', default=lookup('env', 'WALG', default='') ) }}"
    percona_toolkit_version: "{{ lookup('vars', 'extra_percona_toolkit_version', default=lookup('env','PT',default='') ) }}"
    db_user: "{{ lookup('vars', 'extra_db_user', default=lookup('env','DB_USER',default='') ) }}"
    db_password: "{{ lookup('vars', 'extra_db_password', default=lookup('env','DB_PASS',default='') ) }}"
    db_features: "{{ lookup('vars', 'extra_db_features', default=lookup('env','DB_FEATURES',default='') ) }}"
    percona_k8s_op_pxc_version: "{{ lookup('vars', 'extra_percona_k8s_op_pxc_version', default=lookup('env','PKO4PXC',default='') ) }}"
    percona_k8s_op_psmdb_version: "{{ lookup('vars', 'extra_percona_k8s_op_psmdb_version', default=lookup('env','PKO4PSMDB',default='') ) }}"
    zalando_pg_op_version: "{{ lookup('vars', 'extra_zalando_pg_op_version', default=lookup('env','K8S_PG',default='') ) }}"
    start_db: "{{ lookup('vars', 'extra_start_db', default=lookup('env','START',default='') ) }}"
    db_opts_file: "{{ lookup('vars', 'extra_db_opts_file', default=lookup('env','DB_OPTS',default='') ) }}"
    k3s_token: "{{ lookup('vars', 'extra_k3s_token', default=lookup('env','K3S_TOKEN',default='') ) }}"
    k3s_url: "{{ lookup('vars', 'extra_k3s_url', default=lookup('env','K3S_URL',default='') ) }}"
    k3s_version: "{{ lookup('vars', 'extra_k3s_version', default=lookup('env','K3S',default='') ) }}"
    k8s_pmm: "{{ lookup('vars', 'extra_k8s_pmm', default=lookup('env','K8S_PMM',default='') ) }}"
    k8s_minio: "{{ lookup('vars', 'extra_k8s_minio', default=lookup('env','K8S_MINIO',default='') ) }}"
    k3s_flannel_backend: "{{ lookup('vars', 'extra_k3s_flannel_backend', default=lookup('env','K3S_FLANNEL_BACKEND',default='vxlan') ) }}"
    kube_config: "{{ lookup('vars', 'extra_kube_config', default=lookup('env','KUBE_CONFIG',default='') ) }}"
    master_ip: "{{ lookup('vars', 'extra_master_ip', default=lookup('env','DB_IP',default='') ) }}"
    etcd_ip: "{{ lookup('vars', 'extra_etcd_ip', default=lookup('env','ETCD_IP',default='') ) }}"
    proxysql_ip: "{{ lookup('vars', 'extra_proxysql_ip', default=lookup('env','PROXYSQL_IP',default='') ) }}"
    replication_type: "{{ lookup('vars', 'extra_replication_type', default=lookup('env','REPLICATION_TYPE',default='') ) }}"
    cluster_name:  "{{ lookup('vars', 'extra_cluster_name', default=lookup('env','CLUSTER',default='cluster1') ) }}"
    mongo_replicaset: "{{ lookup('vars', 'extra_mongo_replicaset', default=lookup('env','REPLICA_SET',default='') ) }}"
    mongo_configsrv:  "{{ lookup('vars', 'extra_mongo_configsrv', default=lookup('env','MONGO_CONFIGSRV',default='') ) }}"
    mongo_shardsrv:  "{{ lookup('vars', 'extra_mongo_shardsrv', default=lookup('env','MONGO_SHARDSRV',default='') ) }}"
    mongos_cfg:  "{{ lookup('vars', 'extra_mongos_cfg', default=lookup('env','MONGOS_CFG',default='') ) }}"
    mongos_shard:  "{{ lookup('vars', 'extra_mongos_shard', default=lookup('env','MONGOS_SHARD',default='') ) }}"
    proxysql_version: "{{ lookup('vars', 'extra_proxysql_version', default=lookup('env','PROXYSQL',default='') ) }}"
    percona_proxysql_version: "{{ lookup('vars', 'extra_percona_proxysql_version', default=lookup('env','PERCONA_PROXYSQL',default='') ) }}"
    mariadb_version: "{{ lookup('vars', 'extra_mariadb_version', default=lookup('env','MARIADB',default='') ) }}"
    galera:  "{{ lookup('vars', 'extra_galera', default=lookup('env','GALERA',default='') ) }}"
    mysql_version: "{{ lookup('vars', 'extra_mysql_version', default=lookup('env','MYSQL',default='') ) }}"
    mysql_router_version: "{{ lookup('vars', 'extra_mysql_router_version', default=lookup('env','MYSQL_ROUTER',default='') ) }}"
    orchestrator_version: "{{ lookup('vars', 'extra_orchestrator_version', default=lookup('env','ORCHESTRATOR',default='') ) }}"
    debug_packages: "{{ lookup('vars', 'extra_debug_packages', default=lookup('env','DEBUG_PACKAGES',default='') ) }}"
    sysbench_version: "{{ lookup('vars', 'extra_sysbench_version', default=lookup('env','SYSBENCH',default='') ) }}"
    mysql_random_data_load_version: "{{ lookup('vars', 'extra_mysql_random_data_load_version', default=lookup('env','MYSQL_RANDOM_DATA',default='') ) }}"
    mysql_connector_java_version: "{{ lookup('vars', 'extra_mysql_connector_java_version', default=lookup('env','MYSQL_JAVA',default='') ) }}"
    innodb_ruby_version: "{{ lookup('vars', 'extra_innodb_ruby_version', default=lookup('env','INNODB_RUBY',default='') ) }}"
    ldap_server: "{{ lookup('vars', 'extra_ldap_server', default=lookup('env','LDAP_SERVER',default='') ) }}"
    ldap_server_ip: "{{ lookup('vars', 'extra_ldap_server_ip', default=lookup('env','LDAP_IP',default='') ) }}"
    samba_ad: "{{ lookup('vars', 'extra_samba_ad', default=lookup('env','SAMBA_AD',default='') ) }}"
    samba_ip: "{{ lookup('vars', 'extra_samba_ip', default=lookup('env','SAMBA_IP',default='') ) }}"
    samba_sid: "{{ lookup('vars', 'extra_samba_sid', default=lookup('env','SAMBA_SID',default='') ) }}"
    samba_pass: "{{ lookup('vars', 'extra_samba_pass', default=lookup('env','SAMBA_PASS',default='') ) }}"
    samba_kerberos: "{{ lookup('vars', 'extra_samba_kerberos', default=lookup('env','SAMBA_KERBEROS',default='') ) }}"
    kerberos_server: "{{ lookup('vars', 'extra_kerberos_server', default=lookup('env','KERBEROS',default='') ) }}"
    kerberos_client: "{{ lookup('vars', 'extra_kerberos_client', default=lookup('env','KERBEROS_CLIENT',default='') ) }}"
    mydumper_version: "{{ lookup('vars', 'extra_mydumper_version', default=lookup('env','MYDUMPER',default='') ) }}"
    postgresql_version: "{{ lookup('vars', 'extra_postgresql_version', default=lookup('env','PG',default='') ) }}"

    percona_server_name: "{{ 'percona-server' if percona_server_version.startswith('8.0') else 'Percona-Server' }}"
    percona_server_major_ver: "{{ '' if percona_server_version.startswith('8.0') else '-57' if percona_server_version.startswith('5.7') else '-56' if percona_server_version.startswith('5.6') else '' }}"
    percona_server_full_ver: "{{ percona_server_major_ver }}-{{ percona_server_version }}.{{ dist }}.x86_64"
    percona_xtradb_cluster_56_version: "{{ percona_xtradb_cluster_version if percona_xtradb_cluster_version.startswith('5.6') else '' }}"
    percona_xtradb_cluster_name: "{{ 'Percona-XtraDB-Cluster' if percona_xtradb_cluster_version.startswith('5.6') or percona_xtradb_cluster_version.startswith('5.7') else 'percona-xtradb-cluster' }}"
    percona_xtradb_cluster_major_ver: "{{ '-56' if percona_xtradb_cluster_version.startswith('5.6') else '-57' if percona_xtradb_cluster_version.startswith('5.7') else '' }}"
    percona_xtradb_cluster_full_ver: "{{ percona_xtradb_cluster_major_ver }}-{{ percona_xtradb_cluster_version }}.el7.x86_64"
    percona_mysql_name: "{{ percona_server_name if percona_server_version != '' else percona_xtradb_cluster_name if percona_xtradb_cluster_version != '' else '' }}"
    percona_mysql_full_ver: "{{ percona_server_full_ver if percona_server_version != '' else percona_xtradb_cluster_full_ver if percona_xtradb_cluster_version != '' else '' }}"
    psmdb_major_ver: "{{ '-32' if psmdb_version.startswith('3.2') else '-34' if psmdb_version.startswith('3.4') else '-36' if psmdb_version.startswith('3.6') else '' }}"
    psmdb_name: "{{ 'Percona-Server-MongoDB' if psmdb_version.startswith('3.0') or psmdb_version.startswith('3.2') or psmdb_version.startswith('3.4') or psmdb_version.startswith('3.6') else 'percona-server-mongodb' }}"
    pbm_version_short: "{{ pbm_version | regex_replace('^([0-9]+\\.[0-9]+\\.[0-9]+)-.*$', '\\1') }}"
    pmm_client_full_name: "pmm{{ '2' if pmm_client_version.startswith('2') else '' }}-client-{{ pmm_client_version }}.el7.x86_64"
    percona_postgresql_major_ver: "{{ '95' if percona_postgresql_version.startswith('9.5') else '96' if percona_postgresql_version.startswith('9.6') else '10' if percona_postgresql_version.startswith('10.') else '11' if percona_postgresql_version.startswith('11.') else '12' if percona_postgresql_version.startswith('12.') else '13' if percona_postgresql_version.startswith('13.') else '' }}"
    percona_k8s_op_name: "percona-{{ 'xtradb-cluster' if percona_k8s_op_pxc_version != '' else 'server-mongodb' if percona_k8s_op_psmdb_version != '' else '' }}-operator"
    percona_k8s_op_version: "{{ percona_k8s_op_pxc_version if percona_k8s_op_pxc_version != '' else percona_k8s_op_psmdb_version }}"
    db_systemd_service: "{{ 'mongod' if psmdb_version != '' else ('postgresql-' + percona_postgresql_major_ver) if percona_postgresql_version != '' else '' }}"
    mariadb_url: "{{ 'http://downloads.mariadb.com.local' if lookup('env','LOCAL_REPO_CACHE',default='') != '' else 'https://downloads.mariadb.com' }}"
    install_only: "{{ lookup('vars', 'extra_install_only', default=lookup('env','INSTALL_ONLY',default='') ) }}"
    is_percona_repo_required: >-
      {{
      'required' if
      percona_server_version != '' or
      percona_xtrabackup_version != '' or
      percona_xtradb_cluster_version != '' or
      psmdb_version != '' or
      pbm_version != '' or
      percona_postgresql_version != '' or
      percona_toolkit_version != '' or
      pmm_client_version != '' or
      sysbench_version != '' or
      percona_proxysql_version != ''
      else ''
      }}
    soft: >-
      {{
      'ps80' if percona_server_version.startswith('8.0') else
      'pxc80' if percona_xtradb_cluster_version.startswith('8.0') else
      'ps57' if percona_server_version.startswith('5.7') else
      'pxc57' if percona_xtradb_cluster_version.startswith('5.7') else
      'pxc56' if percona_xtradb_cluster_version.startswith('5.6') else
      'ps56' if percona_server_version.startswith('5.6') else
      'pgpool' if pgpool_version != '' else
      'ppg11' if percona_postgresql_version.startswith('11') else
      'ppg12' if percona_postgresql_version.startswith('12') else
      'proxysql' if proxysql_version != '' else
      'percona_proxysql' if percona_proxysql_version != '' else
      'mariadb_server' if mariadb_version != '' else
      'mysql' if mysql_version != '' else
      'mysql_router' if mysql_router_version != '' else
      'orchestrator' if orchestrator_version != '' else
      'sysbench' if sysbench_version != '' else
      'ldap_server' if ldap_server != '' else
      'kerberos_server' if kerberos_server != '' else
      'postgresql' if postgresql_version != '' else
      ''
      }}
  tasks:
    - name: Include package descriptions for each OS
      include_vars:
        file: common/vars/package_description.yaml
        name: os
    - name: vagrant compat
      package:
        name: sudo
        state: present
    - name: Check if /vagrant directory is mounted
      stat:
        path: /vagrant/tools/node_ip.sh
      register: vagrant_dir_mounted
    - name: sync configs and tools
      when: (not vagrant_dir_mounted.stat.exists) or sync_is_required != ''
      include_tasks: common/tasks/copy_files.yaml

    - name: MariaDB Role
      when: mariadb_version != ''
      include_role:
        name: mariadb

    - name: Install Percona yum Repository
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'OracleLinux') and is_percona_repo_required != ''
      block:
        - name: install percona yum repo
          yum:
            name: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
            state: present
            disable_gpg_check: True
    - name: Enable local repo.* caching
      include_tasks: common/tasks/repo_cache.yaml
    - name: Install Percona apt Repository
      when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and is_percona_repo_required != ''
      block:
        - name: install unlisted deps for percona release
          apt:
            pkg:
              - gnupg2
              - curl
        - name: install percona-release.deb
          apt:
            deb: "{{ os[dist].repo_url }}"
          register: percona_release_deb_installed
        - name: refresh apt repo
          when: percona_release_deb_installed.changed
          apt:
            update_cache: yes
   
    - name: install PMM client
      when: pmm_client_version != ""
      package:
        name: "{{item}}"
        state: present
      with_items: "{{os[dist].pmm_client.install_packages }}"
    - name: Setup pmm-admin PMM2
      when: pmm_client_version.startswith('2.') and pmm_url != ''
      register: pmm_admin_config
      changed_when: "'already exists' not in pmm_admin_config.stdout"
      shell:
        cmd: '/usr/bin/pmm-admin config --server-insecure-tls --server-url="{{pmm_url}}" || true'
    - name: Setup pmm-admin PMM1
      when: pmm_client_version.startswith('1.') and pmm_url != ''
      register: pmm_admin_config
      changed_when: "'already exists' not in pmm_admin_config.stdout"
      shell:
        cmd: >-
          pmm-admin config
          --server-insecure-ssl
          --server=$(echo "{{pmm_url}}"|awk -F '[/:@]' '{print $6}'):$(echo "{{pmm_url}}"|awk -F '[/:@]' '{print $7}')
          --server-user=$(echo "{{pmm_url}}"|awk -F '[/:@]' '{print $4}')
          --server-password=$(echo "{{pmm_url}}"|awk -F '[/:@]' '{print $5}') || true

    - name: User Security LDAP, PAM, Active Directory, Vault, Kerberos
      when: vault_version != '' or samba_ad != '' or ldap_server != '' or kerberos_client != ''
      include_role:
        name: user_security

    - name: Postgresql Role
      when: postgresql_version != '' or percona_postgresql_version != '' or odyssey_version != '' or walg_version != '' or pgpool_version != ''
      include_role:
        name: postgresql

    - name: Patroni Role
      when: patroni_version != ''
      include_role:
        name: patroni

    - name: MongoDB Role
      when: psmdb_version != '' or pbm_version != ""
      include_role:
        name: mongodb

    - name: MySQL Role
      when: >
        mysql_version != '' or
        percona_server_version != "" or
        percona_xtradb_cluster_version != "" or
        percona_xtrabackup_version != "" or
        mysql_router_version != "" or
        innodb_ruby_version != '' or
        mydumper_version != '' or
        mysql_connector_java_version != '' or
        mysql_random_data_load_version != '' or
        proxysql_version != '' or
        percona_proxysql_version != '' or
        orchestrator_version != ''
      include_role:
        name: mysql

    - name: Kubernetes Role
      when: zalando_pg_op_version != '' or percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != '' or k3s_url != '' or k3s_version != '' or kube_config != ''
      include_role:
        name: kubernetes

    - name: PMM, Percona Toolkit Role
      when: pmm_server_version != "" or percona_toolkit_version != ""
      include_role:
        name: tools_and_monitoring

    - name: Install db packages
      when: >
        (db_systemd_service != '' or (soft != '' and os[dist][soft].systemd_service)  ) and
        postgresql_version == '' and percona_postgresql_version == '' and percona_server_version == '' and percona_xtradb_cluster_version == '' and proxysql_version == '' and
        ('garbd' not in db_features.split(',')) and orchestrator_version == ''
      include_tasks: common/tasks/install_db_packages.yml

    - name: Start database with systemd
      when: >
        start_db == '1' and
        (db_systemd_service != '' or (soft != '' and os[dist][soft].systemd_service)  ) and
        postgresql_version == '' and percona_postgresql_version == '' and percona_server_version == '' and percona_xtradb_cluster_version == '' and proxysql_version == '' and
        ('garbd' not in db_features.split(',')) and orchestrator_version == ''
      command:
        cmd: systemctl start "{{ os[dist][soft].systemd_service if soft else db_systemd_service }}"


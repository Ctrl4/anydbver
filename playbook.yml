- name: install percona server
  hosts: all
  become: yes
  vars:
    sync_is_required: "{{ lookup('vars', 'extra_sync_is_required', default=lookup('env', 'SYNC', default='') ) }}"
    percona_server_version: "{{ lookup('vars', 'extra_percona_server_version', default=lookup('env', 'PS', default='') ) }}"
    rocksdb_enabled: "{{ lookup('vars', 'extra_rocksdb_enabled', default=lookup('env', 'ROCKSDB', default='') ) }}"
    percona_xtrabackup_version: "{{ lookup('vars', 'extra_percona_xtrabackup_version', default=lookup('env','PXB',default='') ) }}"
    percona_xtradb_cluster_version: "{{ lookup('vars', 'extra_percona_xtradb_cluster_version', default=lookup('env','PXC',default='') ) }}"
    percona_xtradb_cluster_galera: "{{ lookup('vars', 'extra_percona_xtradb_cluster_galera', default=lookup('env','PXC_GALERA',default='') ) }}"
    psmdb_version: "{{ lookup('vars', 'extra_psmdb_version', default=lookup('env','PSMDB',default='') ) }}"
    pbm_version: "{{ lookup('vars', 'extra_pbm_version', default=lookup('env','PBM',default='') ) }}"
    pmm_server_version: "{{ lookup('vars', 'extra_pmm_server_version', default=lookup('env','PMM_SERVER',default='') ) }}"
    pmm_client_version: "{{ lookup('vars', 'extra_pmm_client_version', default=lookup('env','PMM_CLIENT',default='') ) }}"
    pmm_url: "{{ lookup('vars', 'extra_pmm_url', default=lookup('env','PMM_URL',default='') ) }}"
    percona_postgresql_version: "{{ lookup('vars', 'extra_percona_postgresql_version', default=lookup('env', 'PPGSQL', default='') ) }}"
    pgpool_version: "{{ lookup('vars', 'extra_pgpool_version', default=lookup('env', 'PGPOOL', default='') ) }}"
    odyssey_version: "{{ lookup('vars', 'extra_odyssey_version', default=lookup('env', 'ODYSSEY', default='') ) }}"
    walg_version:  "{{ lookup('vars', 'extra_walg_version', default=lookup('env', 'WALG', default='') ) }}"
    percona_toolkit_version: "{{ lookup('vars', 'extra_percona_toolkit_version', default=lookup('env','PT',default='') ) }}"
    db_user: "{{ lookup('vars', 'extra_db_user', default=lookup('env','DB_USER',default='') ) }}"
    db_password: "{{ lookup('vars', 'extra_db_password', default=lookup('env','DB_PASS',default='') ) }}"
    db_features: "{{ lookup('vars', 'extra_db_features', default=lookup('env','DB_FEATURES',default='') ) }}"
    percona_k8s_op_pxc_version: "{{ lookup('vars', 'extra_percona_k8s_op_pxc_version', default=lookup('env','PKO4PXC',default='') ) }}"
    percona_k8s_op_psmdb_version: "{{ lookup('vars', 'extra_percona_k8s_op_psmdb_version', default=lookup('env','PKO4PSMDB',default='') ) }}"
    zalando_pg_op_version: "{{ lookup('vars', 'extra_zalando_pg_op_version', default=lookup('env','K8S_PG',default='') ) }}"
    start_db: "{{ lookup('vars', 'extra_start_db', default=lookup('env','START',default='') ) }}"
    db_opts_file: "{{ lookup('vars', 'extra_db_opts_file', default=lookup('env','DB_OPTS',default='') ) }}"
    k3s_token: "{{ lookup('vars', 'extra_k3s_token', default=lookup('env','K3S_TOKEN',default='') ) }}"
    k3s_url: "{{ lookup('vars', 'extra_k3s_url', default=lookup('env','K3S_URL',default='') ) }}"
    k3s_version: "{{ lookup('vars', 'extra_k3s_version', default=lookup('env','K3S',default='') ) }}"
    k8s_pmm: "{{ lookup('vars', 'extra_k8s_pmm', default=lookup('env','K8S_PMM',default='') ) }}"
    k8s_minio: "{{ lookup('vars', 'extra_k8s_minio', default=lookup('env','K8S_MINIO',default='') ) }}"
    k3s_flannel_backend: "{{ lookup('vars', 'extra_k3s_flannel_backend', default=lookup('env','K3S_FLANNEL_BACKEND',default='vxlan') ) }}"
    kube_config: "{{ lookup('vars', 'extra_kube_config', default=lookup('env','KUBE_CONFIG',default='') ) }}"
    master_ip: "{{ lookup('vars', 'extra_master_ip', default=lookup('env','DB_IP',default='') ) }}"
    replication_type: "{{ lookup('vars', 'extra_replication_type', default=lookup('env','REPLICATION_TYPE',default='') ) }}"
    cluster_name:  "{{ lookup('vars', 'extra_cluster_name', default=lookup('env','CLUSTER',default='cluster1') ) }}"
    mongo_replicaset: "{{ lookup('vars', 'extra_mongo_replicaset', default=lookup('env','REPLICA_SET',default='') ) }}"
    proxysql_version: "{{ lookup('vars', 'extra_proxysql_version', default=lookup('env','PROXYSQL',default='') ) }}"
    percona_proxysql_version: "{{ lookup('vars', 'extra_percona_proxysql_version', default=lookup('env','PERCONA_PROXYSQL',default='') ) }}"
    mariadb_version: "{{ lookup('vars', 'extra_mariadb_version', default=lookup('env','MARIADB',default='') ) }}"
    galera:  "{{ lookup('vars', 'extra_galera', default=lookup('env','GALERA',default='') ) }}"
    mysql_version: "{{ lookup('vars', 'extra_mysql_version', default=lookup('env','MYSQL',default='') ) }}"
    orchestrator_version: "{{ lookup('vars', 'extra_orchestrator_version', default=lookup('env','ORCHESTRATOR',default='') ) }}"
    debug_packages: "{{ lookup('vars', 'extra_debug_packages', default=lookup('env','DEBUG_PACKAGES',default='') ) }}"
    sysbench_version: "{{ lookup('vars', 'extra_sysbench_version', default=lookup('env','SYSBENCH',default='') ) }}"
    mysql_random_data_load_version: "{{ lookup('vars', 'extra_mysql_random_data_load_version', default=lookup('env','MYSQL_RANDOM_DATA',default='') ) }}"
    mysql_connector_java_version: "{{ lookup('vars', 'extra_mysql_connector_java_version', default=lookup('env','MYSQL_JAVA',default='') ) }}"
    innodb_ruby_version: "{{ lookup('vars', 'extra_innodb_ruby_version', default=lookup('env','INNODB_RUBY',default='') ) }}"
    ldap_server: "{{ lookup('vars', 'extra_ldap_server', default=lookup('env','LDAP_SERVER',default='') ) }}"
    ldap_server_ip: "{{ lookup('vars', 'extra_ldap_server_ip', default=lookup('env','LDAP_IP',default='') ) }}"
    samba_ad: "{{ lookup('vars', 'extra_samba_ad', default=lookup('env','SAMBA_AD',default='') ) }}"
    samba_ip: "{{ lookup('vars', 'extra_samba_ip', default=lookup('env','SAMBA_IP',default='') ) }}"
    samba_sid: "{{ lookup('vars', 'extra_samba_sid', default=lookup('env','SAMBA_SID',default='') ) }}"
    samba_pass: "{{ lookup('vars', 'extra_samba_pass', default=lookup('env','SAMBA_PASS',default='') ) }}"
    samba_kerberos: "{{ lookup('vars', 'extra_samba_kerberos', default=lookup('env','SAMBA_KERBEROS',default='') ) }}"
    kerberos_server: "{{ lookup('vars', 'extra_kerberos_server', default=lookup('env','KERBEROS',default='') ) }}"
    kerberos_client: "{{ lookup('vars', 'extra_kerberos_client', default=lookup('env','KERBEROS_CLIENT',default='') ) }}"
    mydumper_version: "{{ lookup('vars', 'extra_mydumper_version', default=lookup('env','MYDUMPER',default='') ) }}"
    postgresql_version: "{{ lookup('vars', 'extra_postgresql_version', default=lookup('env','PG',default='') ) }}"

    percona_server_name: "{{ 'percona-server' if percona_server_version.startswith('8.0') else 'Percona-Server' }}"
    percona_server_major_ver: "{{ '' if percona_server_version.startswith('8.0') else '-57' if percona_server_version.startswith('5.7') else '-56' if percona_server_version.startswith('5.6') else '' }}"
    percona_server_full_ver: "{{ percona_server_major_ver }}-{{ percona_server_version }}.el7.x86_64"
    percona_xtradb_cluster_56_version: "{{ percona_xtradb_cluster_version if percona_xtradb_cluster_version.startswith('5.6') else '' }}"
    percona_xtradb_cluster_name: "{{ 'Percona-XtraDB-Cluster' if percona_xtradb_cluster_version.startswith('5.6') or percona_xtradb_cluster_version.startswith('5.7') else 'percona-xtradb-cluster' }}"
    percona_xtradb_cluster_major_ver: "{{ '-56' if percona_xtradb_cluster_version.startswith('5.6') else '-57' if percona_xtradb_cluster_version.startswith('5.7') else '' }}"
    percona_xtradb_cluster_full_ver: "{{ percona_xtradb_cluster_major_ver }}-{{ percona_xtradb_cluster_version }}.el7.x86_64"
    percona_mysql_name: "{{ percona_server_name if percona_server_version != '' else percona_xtradb_cluster_name if percona_xtradb_cluster_version != '' else '' }}"
    percona_mysql_full_ver: "{{ percona_server_full_ver if percona_server_version != '' else percona_xtradb_cluster_full_ver if percona_xtradb_cluster_version != '' else '' }}"
    psmdb_major_ver: "{{ '-36' if psmdb_version.startswith('3.6') else '' }}"
    psmdb_name: "{{ 'Percona-Server-MongoDB' if psmdb_version.startswith('3.6') or psmdb_version.startswith('3.0') else 'percona-server-mongodb' }}"
    pbm_version_short: "{{ pbm_version | regex_replace('^([0-9]+\\.[0-9]+\\.[0-9]+)-.*$', '\\1') }}"
    pmm_client_full_name: "pmm{{ '2' if pmm_client_version.startswith('2') else '' }}-client-{{ pmm_client_version }}.el7.x86_64"
    percona_postgresql_major_ver: "{{ '11' if percona_postgresql_version.startswith('11.') else '12' if percona_postgresql_version.startswith('12.') else '' }}"
    percona_k8s_op_name: "percona-{{ 'xtradb-cluster' if percona_k8s_op_pxc_version != '' else 'server-mongodb' if percona_k8s_op_psmdb_version != '' else '' }}-operator"
    percona_k8s_op_version: "{{ percona_k8s_op_pxc_version if percona_k8s_op_pxc_version != '' else percona_k8s_op_psmdb_version }}"
    db_systemd_service: "{{ 'mongod' if psmdb_version != '' else ('postgresql-' + percona_postgresql_major_ver) if percona_postgresql_version != '' else '' }}"
    is_percona_repo_required: >-
      {{
      'required' if
      percona_server_version != '' or
      percona_xtrabackup_version != '' or
      percona_xtradb_cluster_version != '' or
      psmdb_version != '' or
      pbm_version != '' or
      percona_postgresql_version != '' or
      percona_toolkit_version != '' or
      pmm_client_version != '' or
      sysbench_version != '' or
      percona_proxysql_version != ''
      else ''
      }}
    dist: >-
      {{
      'el7' if (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and ansible_distribution_version.startswith('7') else
      'el8' if (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and ansible_distribution_version.startswith('8') else
      'bionic' if ansible_distribution_release == 'bionic' else
      'focal' if ansible_distribution_release == 'focal' else
      ''
      }}
    soft: >-
      {{
      'ps80' if percona_server_version.startswith('8.0') else
      'pxc80' if percona_xtradb_cluster_version.startswith('8.0') else
      'ps57' if percona_server_version.startswith('5.7') else
      'pxc57' if percona_xtradb_cluster_version.startswith('5.7') else
      'pxc56' if percona_xtradb_cluster_version.startswith('5.6') else
      'ps56' if percona_server_version.startswith('5.6') else
      'pgpool' if pgpool_version != '' else
      'ppg11' if percona_postgresql_version.startswith('11') else
      'ppg12' if percona_postgresql_version.startswith('12') else
      'proxysql' if proxysql_version != '' else
      'percona_proxysql' if percona_proxysql_version != '' else
      'mariadb_server' if mariadb_version != '' else
      'mysql' if mysql_version != '' else
      'orchestrator' if orchestrator_version != '' else
      'sysbench' if sysbench_version != '' else
      'ldap_server' if ldap_server != '' else
      'kerberos_server' if kerberos_server != '' else
      'postgresql' if postgresql_version != '' else
      ''
      }}
  tasks:
    - name: Include package descriptions for each OS
      include_vars:
        file: common/vars/package_description.yaml
        name: os
    - name: vagrant compat
      package:
        name: sudo
        state: present
    - name: Check if /vagrant directory is mounted
      stat:
        path: /vagrant/tools/node_ip.sh
      register: vagrant_dir_mounted
    - name: sync configs and tools
      when: (not vagrant_dir_mounted.stat.exists) or sync_is_required != ''
      include_tasks: common/tasks/copy_files.yaml

    - name: MariaDB Role
      when: mariadb_version != ''
      include_role:
        name: mariadb

    - name: Install Percona yum Repository
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and is_percona_repo_required != ''
      block:
        - name: install percona yum repo
          yum:
            name: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
            state: present
    - name: Install Percona apt Repository
      when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and is_percona_repo_required != ''
      block:
        - name: install unlisted deps for percona release
          apt:
            pkg:
              - gnupg2
              - curl
        - name: install percona-release.deb
          apt:
            deb: "{{ os[dist].repo_url }}"
          register: percona_release_deb_installed
        - name: refresh apt repo
          when: percona_release_deb_installed.changed
          apt:
            update_cache: yes
    - name: enable Percona MySQL 8.0 repo
      when: percona_server_version.startswith('8.0') or percona_xtradb_cluster_version.startswith('8.0')
      command:
        cmd: /usr/bin/percona-release enable "{{ os[dist][soft].repo_enable_str }}"
        creates: "{{ os[dist][soft].repo_file }}"
      register: percona_release_enabled
      
    - name: MySQL repo
      when: mysql_version != ''
      block:
        - name: MySQL 8.0 yum repo
          when: >
            mysql_version.startswith('8.0') and
            (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
          yum:
            name: "{{os[dist][soft].repo_url}}"
            state: present
    
    - name: Enable EPEL
      when: >
        orchestrator_version != '' and
        (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
      package:
        name: epel-release
        state: present


    - name: Postgresql Role
      when: postgresql_version != '' or percona_postgresql_version != '' or odyssey_version != '' or walg_version != ''
      include_role:
        name: postgresql

    - name: MongoDB Role
      when: psmdb_version != '' or pbm_version != ""
      include_role:
        name: mongodb

    - name: Install db packages
      include_tasks: common/tasks/install_db_packages.yml

    - name: Install Samba Active Directory server
      when: samba_ad != '' and (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
      shell:
        cmd: /bin/bash /vagrant/tools/install_samba_ad.sh
        creates: /opt/samba/sbin/samba

    - name: Setup Samba Active Directory server
      when: samba_ad != '' and (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
      shell:
        cmd: /bin/bash /vagrant/tools/setup_samba_ad.sh
        creates: /root/samba.configured

    - name: install Percona XtraBackup
      when: percona_xtrabackup_version != ""
      package:
        name: "percona-xtrabackup{{ '-24' if percona_xtrabackup_version.startswith('2.4') else '-80' if percona_xtrabackup_version.startswith('8.0')  else '' }}-{{ percona_xtrabackup_version }}.{{dist}}.x86_64"
        state: present
        
    - name: Setup LDAP server
      when: ldap_server != ''
      command:
        cmd: /bin/bash /vagrant/tools/setup_ldap_server.sh "{{db_user}}" "{{db_password}}"
        creates: /root/ldaprootpasswd.ldif

    - name: Setup LDAP on client
      when: ldap_server_ip != ''
      command:
        cmd: /bin/bash /vagrant/tools/setup_ldap_client.sh "{{ldap_server_ip}}"
        creates: /etc/nslcd.conf

    - name: Setup Kerberos server
      when: kerberos_server != ''
      command:
        cmd: /bin/bash /vagrant/tools/setup_kerberos_server.sh "{{db_user}}" "{{db_password}}"
        creates: /root/kerberos.configured

    - name: Setup Kerberos client
      when: kerberos_client != ''
      command:
        cmd: /bin/bash /vagrant/tools/setup_kerberos_client.sh "{{db_user}}" "{{db_password}}" "{{ 'yes' if samba_kerberos != '' else 'no' }}"
        creates: /root/kerberos-client.configured

    # PMM
    - name: install PMM client
      when: pmm_client_version != ""
      package:
        name: "{{item}}"
        state: present
      with_items: "{{os[dist].pmm_client.install_packages }}"
    - name: Setup pmm-admin
      when: pmm_client_version != '' and pmm_url != ''
      register: pmm_admin_config
      changed_when: "'already exists' not in pmm_admin_config.stdout"
      shell:
        cmd: '/usr/bin/pmm-admin config --server-insecure-tls --server-url="{{pmm_url}}" || true'

    - name: install podman (like docker)
      when: pmm_server_version != ""
      package:
        name: podman
        state: present
    - name: Start PMM
      when: pmm_server_version != ""
      shell:
        cmd: "podman create -v /srv --name pmm-data docker.io/percona/pmm-server:{{ pmm_server_version }} /bin/true ; podman run -d -p 80:80 -p 443:443 --volumes-from pmm-data --name pmm-server docker.io/percona/pmm-server:{{ pmm_server_version }} ; podman ps | grep pmm-server && touch /root/pmm-server-created"
        creates: /root/pmm-server-created
    - name: Set PMM2 password
      when: pmm_server_version.startswith('2.') and db_password != ''
      command:
        cmd: podman exec -t pmm-server bash -c  'ln -s /srv/grafana /usr/share/grafana/data; grafana-cli --homepath /usr/share/grafana admin reset-admin-password {{db_password}}'

    - name: Setup PGPool
      when: pgpool_version != '' and master_ip != ''
      shell:
        cmd: /bin/bash /vagrant/tools/setup_pg_pool.sh "{{master_ip}}" "{{db_password}}"
        creates: /root/pgpool.applied

    - name: install Percona Toolkit
      when: percona_toolkit_version != ""
      package:
        name: "percona-toolkit-{{ percona_toolkit_version }}.{{dist}}.x86_64"
        state: present

    - name: Create MySQL Database
      when: >
        (
        percona_server_version != '' or
        percona_xtradb_cluster_version != '' or
        mysql_version != ''
        ) and db_password != ''
      command:
        cmd: /bin/bash /vagrant/tools/create_mysql_db_with_password.sh "{{ db_password }}" "{{ 'oldgrant' if percona_server_version.startswith('5.6') or percona_xtradb_cluster_version.startswith('5.6') else 'no' }}" "{{ os[dist][soft].systemd_service if soft else db_systemd_service }}"
        creates: /root/.my.cnf


    - name: Apply database options from file
      when: (percona_server_version != '' or percona_xtradb_cluster_version != '' or mysql_version != '') and db_opts_file != ''
      command:
        cmd: >-
          /bin/bash /vagrant/tools/apply_mysql_conf.sh
          "{{ os[dist][soft].cnf_file }}"
          "/vagrant/configs/{{ db_opts_file }}"
          "{{cluster_name}}"
          "{{db_user}}"
          "{{db_password}}"
        creates: "/root/{{ db_opts_file | basename }}.applied"

    - name: ProxySQL
      when: proxysql_version !=''
      block:
        - name: install ProxySQL deb package
          when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
          apt:
            deb: "{{os[dist][soft].url}}"

    - name: Start database with systemd
      when:  start_db == '1' and (db_systemd_service != '' or (soft != '' and os[dist][soft].systemd_service)  )
      systemd:
        name: "{{ os[dist][soft].systemd_service if soft else db_systemd_service }}"
        state: started

    - name: Setup and start replication
      when: master_ip != '' and (percona_server_version != '' or percona_xtradb_cluster_version != '' or mysql_version != '')
      shell:
        cmd: /bin/bash /vagrant/tools/setup_mysql_replication.sh "{{ 'gtid' if replication_type == '' else replication_type }}" "{{ master_ip }}" root "{{ db_password }}" "{{soft}}" "{{ os[dist][soft].cnf_file }}" "{{os[dist][soft].systemd_service}}" "{{'cluster1' if cluster_name == '' else cluster_name}}"
        creates: /root/replication.configured

    - name: MySQL LDAP
      when: ldap_server_ip != '' and (percona_server_version != '' or percona_xtradb_cluster_version != '')
      block:
        - name: fill /etc/pam.d/mysqld
          copy:
            dest: /etc/pam.d/mysqld
            content: |
              auth required pam_ldap.so
              account required pam_ldap.so
        - name: setup pam_ldap plugin
          shell:
            cmd: /bin/bash /vagrant/tools/setup_ldap_mysql.sh "{{db_user}}"
            creates: /root/mysql-ldap.applied

    - name: MySQL Samba Active Directory
      when: samba_ip != '' and samba_pass != '' and samba_sid != '' and (percona_server_version != '' or percona_xtradb_cluster_version != '')
      shell:
        cmd: /bin/bash /vagrant/tools/setup_samba_ldap_client.sh "{{samba_ip}}" "{{samba_pass}}" "{{samba_sid}}" mysql

    - name: Install k3s, kubernetes distribution
      include_tasks: common/tasks/kubernetes_install.yaml
      when: (percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != '' or zalando_pg_op_version != '' or (k3s_url != '' and k3s_token != '') or k3s_version != '') and kube_config == ''

    - name: Install kubectl
      when: kube_config != ''
      block:
        - file: path=/root/.kube state=directory mode='0755'
        - copy:
            src: "{{playbook_dir}}/secret/{{kube_config}}"
            dest: /root/.kube/config
            mode: "0600"
            owner: root
            group: root
        - shell:
            warn: false
            cmd: curl -o /usr/bin/kubectl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl; chmod +x /usr/bin/kubectl
            creates: /usr/bin/kubectl
        - include_tasks: common/tasks/helm_install.yaml

    - name: Install git for Percona Operator setup
      when: percona_k8s_op_pxc_version != "" or percona_k8s_op_psmdb_version != "" or zalando_pg_op_version != ""
      package:
        name: git
        state: present
    - name: Install operator
      when: percona_k8s_op_pxc_version != "" or percona_k8s_op_psmdb_version != ""
      shell:
        cmd: >-
          cd /root;
          git clone -b v{{ percona_k8s_op_version }} https://github.com/percona/{{ percona_k8s_op_name }}.git;
          cd {{ percona_k8s_op_name }};
          until kubectl wait --for=condition=ready -n kube-system pod -l k8s-app=kube-dns &>/dev/null;do sleep 2;done;
          kubectl apply -f deploy/bundle.yaml;
          kubectl apply -f deploy/secrets.yaml;
          kubectl apply -f deploy/backup-s3.yaml;
          until kubectl wait --for=condition=ready pod -l name={{ percona_k8s_op_name }} &>/dev/null;do sleep 2;done
        creates: /root/{{ percona_k8s_op_name }}/deploy/cr.yaml
    - name: Start database cluster in k8s
      when: (percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != '') and k8s_pmm == ''
      shell:
        warn: false
        cmd: >-
          sed
          -e 's/antiAffinityTopologyKey: .*$/antiAffinityTopologyKey: \"none\"/g'
          -e 's/allowUnsafeConfigurations: false/allowUnsafeConfigurations: true/'
          /root/{{ percona_k8s_op_name }}/deploy/cr.yaml > /root/{{ percona_k8s_op_name }}/deploy/cr-single.yaml;
          if test $( kubectl get nodes 2>/dev/null|wc -l ) -ge 3 ;
          then kubectl apply -f /root/{{ percona_k8s_op_name }}/deploy/cr.yaml ;
          else kubectl apply -f /root/{{ percona_k8s_op_name }}/deploy/cr-single.yaml ;
          fi
        creates: /root/{{ percona_k8s_op_name }}/deploy/cr-single.yaml

    - name: install Zalando Postgresql Operator
      when: zalando_pg_op_version != ''
      shell:
        cmd: >-
          cd /root;
          git clone -b v{{ zalando_pg_op_version }} https://github.com/zalando/postgres-operator.git;
          cd postgres-operator;
          until kubectl wait --for=condition=ready -n kube-system pod -l k8s-app=kube-dns &>/dev/null;do sleep 2;done;
          kubectl apply -k manifests/;
          until kubectl wait --for=condition=ready pod -l name=postgres-operator &>/dev/null;do sleep 2;done
        creates: /root/postgres-operator/manifests/minimal-postgres-manifest.yaml

    - name: Start Postgresql cluster in k8s
      when: zalando_pg_op_version != ''
      shell:
        warn: false
        cmd: >-
          cd /root/postgres-operator;
          kubectl apply -f manifests/minimal-postgres-manifest.yaml;
          touch /root/zalando_pg.applied
        creates: /root/zalando_pg.applied

    - name: Download yq
      when: percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != '' or k8s_pmm != ''
      get_url:
        url: 'https://github.com/mikefarah/yq/releases/download/3.3.0/yq_linux_amd64'
        dest: /usr/local/bin/yq
        mode: '0755'
    - name: install mysql_random_data_load
      when: mysql_random_data_load_version != ''
      shell:
        warn: false
        cmd: >-
          curl -sL https://github.com/Percona-Lab/mysql_random_data_load/releases/download/v{{mysql_random_data_load_version}}/mysql_random_data_load_{{mysql_random_data_load_version}}_Linux_x86_64.tar.gz
          | tar -C /usr/local/bin -xz mysql_random_data_load
        creates: /usr/local/bin/mysql_random_data_load
    - name: Start database cluster in k8s with pmm
      when: (percona_k8s_op_pxc_version != '' or percona_k8s_op_psmdb_version != '') and k8s_pmm != ''
      shell:
        warn: false
        cmd: >-
          sed -e 's/c3VwYXxefHBheno=/YWRtaW4=/' /root/{{ percona_k8s_op_name }}/deploy/secrets.yaml  | kubectl apply -f - ;
          /usr/local/bin/yq merge -x /root/{{ percona_k8s_op_name }}/deploy/cr.yaml /vagrant/configs/k8s/cr-pmm.yaml
          {{ '/vagrant/configs/k8s/cr-mysql-gtid.yaml' if 'gtid' in db_features.split(',') else '' }}
          {{ '/vagrant/configs/k8s/cr-mysql-pxc57.yaml' if 'pxc57' in db_features.split(',') else '' }}
          {{ '/vagrant/configs/k8s/cr-minio.yaml' if 'backup' in db_features.split(',') else '' }}
          > /root/{{ percona_k8s_op_name }}/deploy/cr-pmm.yaml
          ;
          sed
          -e 's/antiAffinityTopologyKey: .*$/antiAffinityTopologyKey: \"none\"/g'
          -e 's/allowUnsafeConfigurations: false/allowUnsafeConfigurations: true/'
          /root/{{ percona_k8s_op_name }}/deploy/cr-pmm.yaml > /root/{{ percona_k8s_op_name }}/deploy/cr-pmm-single.yaml;
          if test $( kubectl get nodes 2>/dev/null|wc -l ) -ge 3 ;
          then kubectl apply -f /root/{{ percona_k8s_op_name }}/deploy/cr-pmm.yaml ;
          else kubectl apply -f /root/{{ percona_k8s_op_name }}/deploy/cr-pmm-single.yaml ;
          fi
        creates: /root/{{ percona_k8s_op_name }}/deploy/cr-pmm-single.yaml

    - name: MySQL connector java
      when: master_ip != '' and mysql_connector_java_version != ''
      block:
        - name: Create /srv/java directory
          file:
            path: /srv/java
            state: directory
        - name: put example file to /srv/java directory
          template:
            src: "{{playbook_dir}}/configs/connectors/java/ConnectorTest.java.j2"
            dest: /srv/java/ConnectorTest.java
            mode: '0644'
        - name: MySQL Connector Java packages
          package:
            name: "{{ item }}"
            state: present
          with_items: "{{os[dist].mysql_connector_java.install_packages}}"

    - name: InnoDB ruby
      when: innodb_ruby_version != ''
      block:
        - name: install ruby and gem
          package:
            name: ruby
            state: present
        - name: install innodb_ruby
          command:
            cmd: /usr/bin/gem install innodb_ruby
            creates: /usr/local/bin/innodb_space
    - name: Install mydumper
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and mydumper_version != ''
      yum:
        name: "{{os[dist].mydumper.install_packages}}"
        state: present

    - name: Setup pmm client mysql
      when: pmm_client_version != '' and pmm_url != '' and percona_server_version != ''
      register: pmm_admin_mysql_config
      changed_when: "'already exists' not in pmm_admin_mysql_config.stdout"
      shell:
        cmd: /usr/bin/pmm-admin add mysql --query-source="{{ 'perfschema' if 'pmm_perfschema' in db_features.split(',') else 'slowlog' }}" --username="{{db_user}}" --password="{{db_password}}"

    - name: Enable MySQL Audit plugin
      when: percona_server_version != '' and start_db != '' and ('audit' in db_features.split(','))
      shell:
        cmd: mysql -e "INSTALL PLUGIN audit_log SONAME 'audit_log.so'"

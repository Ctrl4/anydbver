#!/bin/bash
OS=el7
ARCH=amd64
IMG="images:centos/7/$ARCH"
PACKAGES=''
PYTHON_INT=/usr/bin/python2.7
NUM_NODES=3
DESTROY=0
LXD_PRIVILEGED_CONTAINERS=''


getip() {
  IP="$(sed -ne '/'$1'/ {s/^.*ansible_host=//;s/ .*$//;p}' ansible_hosts)"
  if [ "x$IP" = "x" ] ; then
    IP="$(sed -ne '/\<'$1'\>/ {s/ .*$//;p}' configs/hosts|head -n 1)"
  fi
}

setupOS() {
  if [ "x$1" == "xel8" ] ; then
    IMG="images:centos/8/$ARCH"
    PACKAGES="$PACKAGES python3"
    PYTHON_INT=/usr/bin/python3
  elif [ "x$1" == "xoel7" ] ; then
    IMG="images:oracle/7/$ARCH"
    PACKAGES=''
    PYTHON_INT=/usr/bin/python2.7
  elif [ "x$1" == "xoel8" ] ; then
    IMG="images:oracle/8/$ARCH"
    PACKAGES="$PACKAGES oracle-epel-release-el8 python3"
    PYTHON_INT=/usr/bin/python3
  else # default CentOS 7
    IMG="images:centos/7/$ARCH"
    PACKAGES=''
    PYTHON_INT=/usr/bin/python2.7
  fi
}

if [ "x$1" = "xssh" ] ; then
  shift
  getip "$1"
  shift
  exec ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i secret/id_rsa root@$IP "$@"
  exit 0
fi
if [ "x$1" = "xscp" ] ; then
  shift
  getip "$1"
  shift
  exec -o UserKnownHostsFile=/dev/null scp -o StrictHostKeyChecking=no -i secret/id_rsa root@$IP:"$1" "$2"
fi
if [ "x$1" = "xlist" ] ; then
  lxc ls ${USER//./-}
  exit 0
fi
if [ "x$1" = "xdestroy" ] || [ "x$1" = "x--destroy" ] ; then
  shift
  if [ "x$1" = "x" ] ; then
    # delete everything by default
    lxc ls ${USER//./-} --format=yaml|grep "name: $USER"|awk -F: '{print $2}'|xargs --no-run-if-empty lxc delete --force
  else
    while [[ $# -gt 0 ]]; do
      i="$USER.$1"
      shift
      c=${i//./-}
      lxc delete --force "$c"
      sed -i -e "/$i/d" ansible_hosts
    done
  fi
  exit 0
fi


# read arguments
opts=$(getopt \
    --longoptions "pmm:,pmm-port:,os:,destroy,k8s,samba:,nodes:,hostname:,vm:,only-node:,privileged" \
    --name "$(basename "$0")" \
    --options "" \
    -- "$@"
)

declare -A HOSTNAMES
declare -A OSes
declare -A VMs

eval set --$opts
while [[ $# -gt 0 ]]; do
  case "$1" in
    --pmm)
      PMM=$2
      shift 2
      ;;
    --nodes)
      NUM_NODES=$2
      shift 2
      ;;
    --only-node)
      ONLY_NODE=$2
      shift 2
      ;;
    --pmm-port)
      PMM_PORT=$2
      shift 2
      ;;
    --os)
      NODE_NAME=$(echo "$2"|cut -d= -f 1)
      NODE_OS=$(echo "$2"|cut -d= -f 2)
      if [[ "x$NODE_OS" != "x" && "$xNODE_NAME" != "x" && "$2" == *=* ]] ; then
        OSes[$USER.$NODE_NAME]="$NODE_OS"
      else
        OS=$2
      fi

      shift 2
      ;;
    --vm)
      NODE_NAME="$2"
      VMs[$USER.$NODE_NAME]="--vm"
      shift 2
      ;;
    --k8s)
      K8S=1
      shift
      ;;
    --samba)
      SAMBA_NODE=$2
      shift 2
      ;;
    --hostname)
      NODE_NAME=$(echo "$2"|cut -d= -f 1)
      NODE_HOST=$(echo "$2"|cut -d= -f 2)
      HOSTNAMES[$USER.$NODE_NAME]="$NODE_HOST"
      shift 2
      ;;
    --privileged)
      LXD_PRIVILEGED_CONTAINERS='-c security.nesting=true -c security.privileged=true'
      shift
      ;;
    --destroy)
      DESTROY=1
      shift
      ;;
      *)
      break
      ;;
  esac
done

if [ "x$LXD_PROFILE" != "x" ] ; then
  LXD_PROFILE="--profile $LXD_PROFILE"
fi

if [ "x$ONLY_NODE" != "x" ] ; then
  NUM_NODES=20
else
  :> ansible_hosts
  :> configs/hosts
fi

test -f secret/id_rsa || ssh-keygen -t rsa -f secret/id_rsa -P '' && chmod 0600 secret/id_rsa
test -f secret/rs0-keyfile || openssl rand -base64 756 > secret/rs0-keyfile

N=0
for i in ${USER}.default $(seq 1 $(($NUM_NODES-1))|sed -e s/^/${USER}.node/); do
  if [ "x$ONLY_NODE" != "x" ] && [ "x${USER}.$ONLY_NODE" != "x$i" ] ; then
      continue
  fi

  if [ "x${OSes[$i]}" != "x" ] ; then
    setupOS ${OSes[$i]} 
  else
    setupOS $OS
  fi

  c=${i//./-}
  if [[ $ANYDBVER_CACHE_OS_IMG == 1 ]] && lxc image list --format yaml ${USER}-${OS}-empty | grep -q ${USER}-${OS}-empty ; then
    lxc launch $LXD_PROFILE ${USER}-${OS}-empty $c $LXD_PRIVILEGED_CONTAINERS ${VMs[$i]}
    until lxc exec $c true ; do sleep 2; done
  else
    lxc launch $LXD_PROFILE $IMG $c $LXD_PRIVILEGED_CONTAINERS ${VMs[$i]}
    until lxc exec $c true ; do sleep 2; done
    lxc exec $c -- mkdir /root/.ssh
    lxc file push secret/id_rsa.pub $c/root/.ssh/authorized_keys
    lxc file push tools/node_ip.sh $c/usr/bin/node_ip.sh
    lxc exec $c -- bash -c "export LANG=C;test -f /usr/bin/rsync || (until ping  -c 1 percona.com &>/dev/null ; do sleep 1; done; for pkg in sudo openssh-server iproute rsync $PACKAGES; do yum install -q -y \$pkg ; done); chmod -R og-rwx /root/.ssh;sed -i -e 's/#UseDNS yes/UseDNS no/' -e 's/#PermitRootLogin.*$/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config;sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd; chmod 0600 /root/.ssh/authorized_keys; chmod 0700 /root/.ssh; chown root:root -R /root/.ssh; yum install -q -y https://repo.percona.com/yum/release/7/RPMS/x86_64/libeatmydata-0.1-00.21.el7.centos.x86_64.rpm"
    if [[ $ANYDBVER_CACHE_OS_IMG == 1 ]] ; then
      lxc stop $c
      lxc publish ihanick-default --alias ${USER}-${OS}-empty
      lxc start $c
    fi
  fi

  lxc exec $c -- bash -c "systemctl enable sshd;systemctl restart sshd"

  IP=$(lxc exec $c -- /bin/bash /usr/bin/node_ip.sh)
  echo "$i ansible_connection=ssh ansible_user=root ansible_ssh_private_key_file=secret/id_rsa ansible_host=$IP ansible_python_interpreter=$PYTHON_INT ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> ansible_hosts

  if [ "x${HOSTNAMES[$i]}" != "x" ] ; then
    lxc exec $c -- hostnamectl set-hostname "${HOSTNAMES[$i]}"
  fi

  if [ "x${HOSTNAMES[$i]}" != "x" ] ; then
    SHORT_NAME=$(echo "${HOSTNAMES[$i]}" | cut -d. -f 1)
    echo "$IP ${HOSTNAMES[$i]} $SHORT_NAME" >> configs/hosts
  fi

  ((N=N+1))
  if [ $N -eq $NUM_NODES ] ; then break ; fi
done

for i in ${USER}.default $(seq 1 $(($NUM_NODES-1))|sed -e s/^/${USER}.node/); do
  if [ "x$ONLY_NODE" != "x" ] && [ "x${USER}.$ONLY_NODE" != "x$i" ] ; then
      continue
  fi
  c=${i//./-}
  lxc exec $c -- bash -c "cat >> /etc/hosts" < configs/hosts
done
